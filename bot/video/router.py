import logging
import tempfile
import os
import requests

from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, CallbackQuery

from bot.filters import TextCommand, StateCommand, StartWithQuery
from bot.commands import video_command, video_text
from bot.empty_prompt import is_empty_prompt
from bot.constants import DEFAULT_ERROR_MESSAGE
from services import StateTypes, stateService, videoService, tokenizeService

videoRouter = Router()


async def video_create_messages(message: Message, generation: dict):
    data = generation.get('data')
    output = data.get('output') if data else None
    video_url = output.get('video_url') if output else None

    if video_url:
        logging.info(f"Video: –ø–æ–ª—É—á–µ–Ω video_url: {video_url}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        ext = '.mp4'
        if video_url.endswith('.mov'):
            ext = '.mov'
        elif video_url.endswith('.webm'):
            ext = '.webm'
            
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp_file:
                response = requests.get(video_url, timeout=60)
                response.raise_for_status()
                tmp_file.write(response.content)
                tmp_file_path = tmp_file.name
                logging.info(f"Video: —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª {ext} —Ä–∞–∑–º–µ—Ä–æ–º {len(response.content)} –±–∞–π—Ç")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            input_file = FSInputFile(tmp_file_path, filename=f"generated_video{ext}")
            await message.answer_video(
                video=input_file, 
                caption="–í–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ! üé¨"
            )
            logging.info(f"Video: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∏–¥–µ–æ—Ñ–∞–π–ª")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {video_url}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é."
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if 'tmp_file_path' in locals() and os.path.exists(tmp_file_path):
                logging.info(f"–£–¥–∞–ª—è—é tmp_file_path: {tmp_file_path}")
                os.remove(tmp_file_path)
    else:
        logging.error(f"Video: –Ω–µ—Ç video_url. generation={generation}")
        status = data.get('status') if data else 'unknown'
        error_info = data.get('error', {}) if data else {}
        error_message = error_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª.\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–û—à–∏–±–∫–∞: {error_message}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )

    await message.answer(
        text="C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –µ—â–µ? üé¨",
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üé¨",
                        callback_data="video-generate"
                    )
                ]
            ],
        )
    )


@videoRouter.message(StateCommand(StateTypes.Video))
async def video_generate_handler(message: Message):
    user_id = message.from_user.id

    try:
        if not stateService.is_video_state(user_id):
            return

        tokens = await tokenizeService.get_tokens(user_id)
        if tokens.get("tokens", 0) < 0:
            await message.answer("""
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç *‚ö°Ô∏è*. üòî

/balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å
/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ *‚ö°Ô∏è*!       
""")
            stateService.set_current_state(user_id, StateTypes.Default)
            return

        if is_empty_prompt(message.text):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ üé¨. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-video-generate"
                            )
                        ]
                    ],
                )
            )
            return

        if len(message.text) > 500:
            await message.answer(
                """–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ üé¨ *–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤*.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–º—Ç –∫–æ—Ä–æ—á–µ.
""",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-video-generate"
                            )
                        ],
                    ],
                )
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—Ç–∏–ª—è
        videoService.store_user_data(str(user_id), prompt=message.text)
        stateService.set_current_state(user_id, StateTypes.VideoStyle)

        await message.answer(
            text="""–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Ç–∏–ª—å* –≤–∏–¥–µ–æ üé¨.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:
‚Ä¢ realistic - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ
‚Ä¢ cartoon - –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å
‚Ä¢ anime - –∞–Ω–∏–º–µ —Å—Ç–∏–ª—å
‚Ä¢ cinematic - –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å
‚Ä¢ artistic - —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å

*–ù–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤*.
""",
            reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π üì∑",
                            callback_data="video-style-realistic"
                        ),
                        InlineKeyboardButton(
                            text="–ú—É–ª—å—Ç—è—à–Ω—ã–π üé®",
                            callback_data="video-style-cartoon"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="–ê–Ω–∏–º–µ üéå",
                            callback_data="video-style-anime"
                        ),
                        InlineKeyboardButton(
                            text="–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ üé≠",
                            callback_data="video-style-cinematic"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π üñºÔ∏è",
                            callback_data="video-style-artistic"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                            callback_data="cancel-video-generate"
                        )
                    ],
                ]
            ),
        )

    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to process Video prompt: {e}")
        stateService.set_current_state(user_id, StateTypes.Default)
        return


@videoRouter.callback_query(StartWithQuery("video-style-"))
async def video_style_callback_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    style = callback_query.data.replace("video-style-", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = videoService.get_user_data(str(user_id))
    prompt = user_data.get('prompt', '')
    
    if not prompt:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        stateService.set_current_state(user_id, StateTypes.Default)
        videoService.clear_user_data(str(user_id))
        await callback_query.answer()
        return
    
    await process_video_generation(callback_query.message, user_id, prompt, style)
    await callback_query.answer()


@videoRouter.message(StateCommand(StateTypes.VideoStyle))
async def video_style_handler(message: Message):
    user_id = message.from_user.id

    try:
        if not stateService.is_video_style_state(user_id):
            return

        if is_empty_prompt(message.text):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∏–ª—å –≤–∏–¥–µ–æ üé¨. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-video-generate"
                            )
                        ]
                    ],
                )
            )
            return

        if len(message.text) > 50:
            await message.answer(
                """–°—Ç–∏–ª—å –≤–∏–¥–µ–æ üé¨ *–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤*.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.
""",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-video-generate"
                            )
                        ],
                    ],
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = videoService.get_user_data(str(user_id))
        prompt = user_data.get('prompt', '')
        style = message.text.strip()

        if not prompt:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            stateService.set_current_state(user_id, StateTypes.Default)
            videoService.clear_user_data(str(user_id))
            return

        await process_video_generation(message, user_id, prompt, style)

    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to generate Video: {e}")
        stateService.set_current_state(user_id, StateTypes.Default)
        videoService.clear_user_data(str(user_id))
        return


async def process_video_generation(message: Message, user_id: int, prompt: str, style: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    stateService.set_current_state(user_id, StateTypes.Default)

    wait_message = await message.answer(
        f"**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–û–ø–∏—Å–∞–Ω–∏–µ: {prompt}\n–°—Ç–∏–ª—å: {style}\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: *5-15 –º–∏–Ω—É—Ç*.\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º."
    )

    await message.bot.send_chat_action(message.chat.id, "typing")

    async def task_id_get(task_id: str):
        await message.answer(f"`1:video:{task_id}:generate`")
        await message.answer(
            f"""–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.
                            
–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
"""
        )

    generation = await videoService.generate_video(prompt, style, task_id_get)

    if not generation or not generation.get('data'):
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –°–µ—Ä–≤–∏—Å Kling –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 –º–∏–Ω—É—Ç)\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ/—Å—Ç–∏–ª—å –≤–∏–¥–µ–æ."
        )
        videoService.clear_user_data(str(user_id))
        return

    await video_create_messages(message, generation)

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ generation —É—Å–ø–µ—à–Ω–∞
    status = generation.get('data', {}).get('status')
    if status == "completed":
        await tokenizeService.update_token(user_id, 8000, "subtract")
        await message.answer(
            f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ *Kling*: *8000*

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
"""
        )
    else:
        await message.answer(
            "‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è –Ω–µ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π."
        )

    await wait_message.delete()

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    videoService.clear_user_data(str(user_id))


@videoRouter.message(TextCommand([video_command(), video_text()]))
async def video_prepare_handler(message: Message):
    user_id = message.from_user.id
    await enter_video_state(user_id, message)


@videoRouter.callback_query(StartWithQuery("video-generate"))
async def video_prepare_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await enter_video_state(user_id, callback_query.message)


@videoRouter.callback_query(StartWithQuery("cancel-video-generate"))
async def cancel_state(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    stateService.set_current_state(user_id, StateTypes.Default)
    videoService.clear_user_data(str(user_id))
    await callback_query.message.delete()
    await callback_query.answer("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!")


async def enter_video_state(user_id, message: Message):
    stateService.set_current_state(user_id, StateTypes.Video)

    await message.answer(
        text="""*–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º* –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ *Kling*.

*–°–ª–µ–¥—É—é—â–µ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ* –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

–ü–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –≤–∏–¥–µ–æ.

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å *8000‚ö°Ô∏è*.

–û–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ *—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ* üé¨ (*–Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤*), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.

*–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:*
‚Ä¢ "–ö–æ—Ç –∏–≥—Ä–∞–µ—Ç —Å –º—è—á–∏–∫–æ–º –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–π –ª—É–∂–∞–π–∫–µ"
‚Ä¢ "–ú–∞—à–∏–Ω–∞ –µ–¥–µ—Ç –ø–æ –≥–æ—Ä–Ω–æ–π –¥–æ—Ä–æ–≥–µ –Ω–∞ –∑–∞–∫–∞—Ç–µ"
‚Ä¢ "–¢–∞–Ω—Ü—É—é—â–∏–µ –ª—é–¥–∏ –Ω–∞ –ø–ª—è–∂–µ –ø–æ–¥ –∑–≤–µ–∑–¥–Ω—ã–º –Ω–µ–±–æ–º"
""",
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                        callback_data="cancel-video-generate"
                    )
                ],
            ]
        ),
    )