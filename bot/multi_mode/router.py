import asyncio
from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from bot.agreement import agreement_handler
from bot.commands import multi_mode_command, exit_multi_mode_command, get_response_command
from bot.filters import TextCommand, StateCommand
from bot.gpt.utils import is_chat_member
from bot.gpt.router import handle_gpt_request
from services import stateService, StateTypes, multiModeService

multiModeRouter = Router()


def create_multi_mode_keyboard(message_count: int = 0, auto_seconds: int = None) -> InlineKeyboardMarkup:
    """Create inline keyboard for multi-mode"""
    buttons = []
    
    # Get response button
    response_text = f"‚úÖ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç ({message_count} —Å–æ–æ–±—â.)" if message_count > 0 else "‚úÖ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
    buttons.append([InlineKeyboardButton(text=response_text, callback_data="multi_get_response")])
    
    # Auto-confirm settings
    if auto_seconds:
        buttons.append([InlineKeyboardButton(text=f"‚è±Ô∏è –ê–≤—Ç–æ: {auto_seconds}—Å", callback_data="multi_auto_settings")])
    else:
        buttons.append([InlineKeyboardButton(text="‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç", callback_data="multi_auto_settings")])
    
    # Exit multi-mode
    buttons.append([InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞", callback_data="multi_exit")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_auto_settings_keyboard() -> InlineKeyboardMarkup:
    """Create keyboard for auto-confirmation settings"""
    buttons = [
        [InlineKeyboardButton(text="5 —Å–µ–∫—É–Ω–¥", callback_data="multi_auto_5")],
        [InlineKeyboardButton(text="10 —Å–µ–∫—É–Ω–¥", callback_data="multi_auto_10")],
        [InlineKeyboardButton(text="30 —Å–µ–∫—É–Ω–¥", callback_data="multi_auto_30")],
        [InlineKeyboardButton(text="60 —Å–µ–∫—É–Ω–¥", callback_data="multi_auto_60")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="multi_auto_off")],
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="multi_back")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@multiModeRouter.message(TextCommand(multi_mode_command()))
async def enter_multi_mode_handler(message: Message):
    """Handler for /multi_mode command"""
    user_id = message.from_user.id
    
    # Check agreement and subscription
    is_agreement = await agreement_handler(message)
    if not is_agreement:
        return
    
    is_subscribe = await is_chat_member(message)
    if not is_subscribe:
        return
    
    # Set multi-mode state
    stateService.set_current_state(user_id, StateTypes.MultiMode)
    multiModeService.clear_messages(user_id)
    
    keyboard = create_multi_mode_keyboard()
    
    await message.answer(
        "üìã *–†–µ–∂–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥. "
        "–û–Ω–∏ –±—É–¥—É—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è, –∞ –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–∞–∫ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω–æ\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ \"–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç\" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞\" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É",
        reply_markup=keyboard
    )


@multiModeRouter.message(TextCommand(exit_multi_mode_command()))
async def exit_multi_mode_handler(message: Message):
    """Handler for /exit_multi command"""
    user_id = message.from_user.id
    
    if not stateService.is_multi_mode_state(user_id):
        await message.answer("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    # Clear data and set default state
    multiModeService.clear_messages(user_id)
    multiModeService.clear_auto_confirm_seconds(user_id)
    stateService.set_current_state(user_id, StateTypes.Default)
    
    await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")


@multiModeRouter.message(TextCommand(get_response_command()))
async def get_response_handler(message: Message):
    """Handler for /get_response command"""
    user_id = message.from_user.id
    
    if not stateService.is_multi_mode_state(user_id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    
    await process_multi_mode_messages(message)


@multiModeRouter.callback_query(lambda c: c.data.startswith("multi_"))
async def multi_mode_callback_handler(callback: CallbackQuery):
    """Handler for multi-mode callback queries"""
    user_id = callback.from_user.id
    
    if callback.data == "multi_get_response":
        await process_multi_mode_messages(callback.message)
    
    elif callback.data == "multi_auto_settings":
        keyboard = create_auto_settings_keyboard()
        await callback.message.edit_text(
            "‚è±Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, "
            "–ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:",
            reply_markup=keyboard
        )
    
    elif callback.data.startswith("multi_auto_"):
        if callback.data == "multi_auto_off":
            multiModeService.clear_auto_confirm_seconds(user_id)
            await callback.answer("‚úÖ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω")
        elif callback.data == "multi_auto_5":
            multiModeService.set_auto_confirm_seconds(user_id, 5)
            await callback.answer("‚úÖ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç: 5 —Å–µ–∫—É–Ω–¥")
        elif callback.data == "multi_auto_10":
            multiModeService.set_auto_confirm_seconds(user_id, 10)
            await callback.answer("‚úÖ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç: 10 —Å–µ–∫—É–Ω–¥")
        elif callback.data == "multi_auto_30":
            multiModeService.set_auto_confirm_seconds(user_id, 30)
            await callback.answer("‚úÖ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç: 30 —Å–µ–∫—É–Ω–¥")
        elif callback.data == "multi_auto_60":
            multiModeService.set_auto_confirm_seconds(user_id, 60)
            await callback.answer("‚úÖ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç: 60 —Å–µ–∫—É–Ω–¥")
        
        # Update keyboard
        message_count = multiModeService.get_message_count(user_id)
        auto_seconds = multiModeService.get_auto_confirm_seconds(user_id)
        keyboard = create_multi_mode_keyboard(message_count, auto_seconds)
        
        await callback.message.edit_text(
            "üìã *–†–µ–∂–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω*\n\n"
            f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
            f"–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç: {'–≤–∫–ª—é—á—ë–Ω' if auto_seconds else '–æ—Ç–∫–ª—é—á—ë–Ω'}",
            reply_markup=keyboard
        )
    
    elif callback.data == "multi_back":
        message_count = multiModeService.get_message_count(user_id)
        auto_seconds = multiModeService.get_auto_confirm_seconds(user_id)
        keyboard = create_multi_mode_keyboard(message_count, auto_seconds)
        
        await callback.message.edit_text(
            "üìã *–†–µ–∂–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω*\n\n"
            f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
            f"–ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç: {'–≤–∫–ª—é—á—ë–Ω' if auto_seconds else '–æ—Ç–∫–ª—é—á—ë–Ω'}",
            reply_markup=keyboard
        )
    
    elif callback.data == "multi_exit":
        multiModeService.clear_messages(user_id)
        multiModeService.clear_auto_confirm_seconds(user_id)
        stateService.set_current_state(user_id, StateTypes.Default)
        
        await callback.message.edit_text("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")


async def process_multi_mode_messages(message: Message):
    """Process accumulated messages in multi-mode"""
    user_id = message.from_user.id
    
    message_count = multiModeService.get_message_count(user_id)
    if message_count == 0:
        await message.answer("‚ùå –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return
    
    # Get combined text
    combined_text = multiModeService.get_combined_text(user_id)
    
    # Clear messages
    multiModeService.clear_messages(user_id)
    
    # Return to default state for processing
    stateService.set_current_state(user_id, StateTypes.Default)
    
    # Process through GPT
    await handle_gpt_request(message, combined_text)
    
    # Return to multi-mode state
    stateService.set_current_state(user_id, StateTypes.MultiMode)
    
    # Show updated keyboard
    auto_seconds = multiModeService.get_auto_confirm_seconds(user_id)
    keyboard = create_multi_mode_keyboard(0, auto_seconds)
    
    await message.answer(
        "üìã *–†–µ–∂–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n"
        "–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!",
        reply_markup=keyboard
    )


# Auto-confirmation timer storage
auto_timers = {}


async def schedule_auto_response(user_id: str, message: Message):
    """Schedule auto-response after specified time"""
    auto_seconds = multiModeService.get_auto_confirm_seconds(user_id)
    if not auto_seconds:
        return
    
    # Cancel previous timer if exists
    if user_id in auto_timers:
        auto_timers[user_id].cancel()
    
    async def auto_response():
        try:
            await asyncio.sleep(auto_seconds)
            # Check if user is still in multi-mode and has messages
            if (stateService.is_multi_mode_state(user_id) and 
                multiModeService.get_message_count(user_id) > 0):
                await process_multi_mode_messages(message)
        except asyncio.CancelledError:
            pass
        finally:
            auto_timers.pop(user_id, None)
    
    # Start new timer
    auto_timers[user_id] = asyncio.create_task(auto_response())


# Handler for regular messages in multi-mode
@multiModeRouter.message(StateCommand(StateTypes.MultiMode))
async def multi_mode_message_handler(message: Message):
    """Handler for messages in multi-mode state"""
    user_id = message.from_user.id
    
    # Check agreement and subscription
    is_agreement = await agreement_handler(message)
    if not is_agreement:
        return
    
    is_subscribe = await is_chat_member(message)
    if not is_subscribe:
        return
    
    # Add message to batch
    text = message.text or message.caption or ""
    if text.strip():
        multiModeService.add_message(user_id, text.strip())
        
        message_count = multiModeService.get_message_count(user_id)
        auto_seconds = multiModeService.get_auto_confirm_seconds(user_id)
        
        # Update keyboard
        keyboard = create_multi_mode_keyboard(message_count, auto_seconds)
        
        await message.answer(
            f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ* ({message_count} –Ω–∞–∫–æ–ø–ª–µ–Ω–æ)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç\".",
            reply_markup=keyboard
        )
        
        # Schedule auto-response if enabled
        await schedule_auto_response(user_id, message)
    else:
        await message.answer("‚ùå –ü—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å.")