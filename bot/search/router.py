import logging
from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from bot.commands import search_command, search_text
from bot.filters import TextCommand
from services.web_search_service import web_search_service

searchRouter = Router()

logger = logging.getLogger(__name__)


@searchRouter.message(Command("search"))
@searchRouter.message(TextCommand(search_command()))
@searchRouter.message(TextCommand(search_text()))
async def search_handler(message: Message):
    """Handle search command"""
    try:
        # Extract search query from message
        query = ""
        if message.text:
            # Remove command prefix
            text = message.text.strip()
            if text.startswith("/search"):
                query = text[7:].strip()
            elif text == search_text():
                # No query provided with button click
                await message.answer(
                    "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "`/search –≤–∞—à –∑–∞–ø—Ä–æ—Å`\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: `/search –Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç`",
                    parse_mode="Markdown"
                )
                return
            else:
                query = text
        
        if not query:
            await message.answer(
                "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/search –≤–∞—à –∑–∞–ø—Ä–æ—Å`\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/search –Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç`",
                parse_mode="Markdown"
            )
            return
        
        # Send "searching" message
        status_message = await message.answer(
            f"üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*\n"
            "‚è≥ –ò—â–µ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö...",
            parse_mode="Markdown"
        )
        
        # Perform search
        search_response = await web_search_service.search(query, max_results=8)
        
        if not search_response.results:
            await status_message.edit_text(
                f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*\n"
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                parse_mode="Markdown"
            )
            return
        
        # Format results
        response_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*\n\n"
        
        for i, result in enumerate(search_response.results, 1):
            # Limit snippet length for readability
            snippet = result.snippet[:150] + "..." if len(result.snippet) > 150 else result.snippet
            
            response_text += f"*{i}. {result.title}*\n"
            response_text += f"{snippet}\n"
            response_text += f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({result.url})\n"
            response_text += f"üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source}\n\n"
        
        # Add summary
        sources_text = ", ".join(search_response.sources_used)
        response_text += f"üìä –ù–∞–π–¥–µ–Ω–æ {search_response.total_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources_text}"
        
        # Create keyboard for new search
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]
        ])
        
        # Update the status message with results
        await status_message.edit_text(
            response_text,
            parse_mode="Markdown",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="Markdown"
        )


@searchRouter.callback_query(lambda c: c.data == "new_search")
async def new_search_callback(callback_query):
    """Handle new search button"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "`/search –≤–∞—à –∑–∞–ø—Ä–æ—Å`",
        parse_mode="Markdown"
    )