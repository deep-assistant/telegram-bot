import logging
import tempfile
import os
import requests

from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, CallbackQuery
from pydub import AudioSegment
from pydub.utils import which

from bot.filters import TextCommand, StateCommand, StartWithQuery
from bot.commands import suno_command, suno_text
from bot.empty_prompt import is_empty_prompt
from bot.constants import DEFAULT_ERROR_MESSAGE
from services import StateTypes, stateService, sunoService, tokenizeService

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ ffmpeg –¥–ª—è pydub
AudioSegment.converter = which("ffmpeg")
os.environ['PATH'] += ':/usr/bin'

sunoRouter = Router()


async def suno_create_messages(message: Message, generation: dict):
    data = generation.get('data')
    output = data.get('output') if data else None
    audio_url = output.get('audio_url') if output else None

    if audio_url:
        logging.info(f"Suno: –ø–æ–ª—É—á–µ–Ω audio_url: {audio_url}")
        ext = '.flac' if audio_url.endswith('.flac') else '.mp3'
        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp_file:
            response = requests.get(audio_url)
            tmp_file.write(response.content)
            tmp_file_path = tmp_file.name
            logging.info(f"Suno: —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª {ext} —Ä–∞–∑–º–µ—Ä–æ–º {len(response.content)} –±–∞–π—Ç")

        if ext == '.flac':
            base, _ = os.path.splitext(tmp_file_path)
            mp3_path = base + ".mp3"
            try:
                audio = AudioSegment.from_file(tmp_file_path, format="flac")
                audio.export(mp3_path, format="mp3")
                input_file = FSInputFile(mp3_path, filename="output.mp3")
                await message.answer_document(document=input_file, caption="–í–∞—à–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (mp3)!")
                logging.info(f"Suno: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω mp3 —Ñ–∞–π–ª")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
            finally:
                if mp3_path and isinstance(mp3_path, str):
                    if os.path.exists(mp3_path):
                        logging.info(f"–£–¥–∞–ª—è—é mp3_path: {mp3_path}")
                        os.remove(mp3_path)
                if tmp_file_path and isinstance(tmp_file_path, str):
                    if os.path.exists(tmp_file_path):
                        logging.info(f"–£–¥–∞–ª—è—é tmp_file_path: {tmp_file_path}")
                        os.remove(tmp_file_path)
        else:
            try:
                input_file = FSInputFile(tmp_file_path, filename="output.mp3")
                await message.answer_document(document=input_file, caption="–í–∞—à–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (mp3)!")
                logging.info(f"Suno: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω mp3 —Ñ–∞–π–ª")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ mp3: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
            finally:
                if tmp_file_path and isinstance(tmp_file_path, str):
                    if os.path.exists(tmp_file_path):
                        logging.info(f"–£–¥–∞–ª—è—é tmp_file_path: {tmp_file_path}")
                        os.remove(tmp_file_path)
    else:
        logging.error(f"Suno: –Ω–µ—Ç audio_url. generation={generation}")
        status = data.get('status') if data else 'unknown'
        error_info = data.get('error', {}) if data else {}
        
        if status == 'failed' and error_info:
            # Use human-readable error message for failed tasks
            human_readable_error = sunoService.get_human_readable_error(error_info)
            await message.answer(human_readable_error)
        else:
            # Fallback for other cases
            error_message = error_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç Suno.\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–û—à–∏–±–∫–∞: {error_message}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
            )

    await message.answer(
        text="C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Suno –µ—â–µ? üî•",
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                        callback_data="suno-generate"
                    )
                ]
            ],
        )
    )


@sunoRouter.message(StateCommand(StateTypes.Suno))
async def suno_generate_handler(message: Message):
    user_id = message.from_user.id

    try:
        if not stateService.is_suno_state(user_id):
            return

        tokens = await tokenizeService.get_tokens(user_id)
        if tokens.get("tokens", 0) < 0:
            await message.answer("""
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç *‚ö°Ô∏è*. üòî

/balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å
/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ *‚ö°Ô∏è*!       
""")
            stateService.set_current_state(user_id, StateTypes.Default)
            return

        if is_empty_prompt(message.text):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-suno-generate"
                            )
                        ]
                    ],
                )
            )
            return

        if len(message.text) > 200:
            await message.answer(
                """–û–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ *–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤* –¥–ª—è Suno.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–º—Ç –∫–æ—Ä–æ—á–µ.
""",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-suno-generate"
                            )
                        ],
                    ],
                )
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—Ç–∏–ª—è
        sunoService.store_user_data(str(user_id), topic=message.text)
        stateService.set_current_state(user_id, StateTypes.SunoStyle)

        await message.answer(
            text="""–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ *—Å—Ç–∏–ª—å* –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ.

–ù–∞–ø—Ä–∏–º–µ—Ä: pop, rock, jazz, classical, electronic, folk, country, blues, hip-hop, reggae, latin, ambient, techno, house, r&b, soul, metal, punk, indie, alternative –∏ –¥—Ä—É–≥–∏–µ.

*–ù–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤*.
""",
            reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                            callback_data="cancel-suno-generate"
                        )
                    ],
                ]
            ),
        )

    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to process Suno topic: {e}")
        stateService.set_current_state(user_id, StateTypes.Default)
        return


@sunoRouter.message(StateCommand(StateTypes.SunoStyle))
async def suno_style_handler(message: Message):
    user_id = message.from_user.id

    try:
        if not stateService.is_suno_style_state(user_id):
            return

        if is_empty_prompt(message.text):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∏–ª—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-suno-generate"
                            )
                        ]
                    ],
                )
            )
            return

        if len(message.text) > 50:
            await message.answer(
                """–°—Ç–∏–ª—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ *–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤*.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.
""",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-suno-generate"
                            )
                        ],
                    ],
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = sunoService.get_user_data(str(user_id))
        topic = user_data.get('topic', '')
        style = message.text.strip()

        if not topic:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Ç–µ–º–∞ –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            stateService.set_current_state(user_id, StateTypes.Default)
            sunoService.clear_user_data(str(user_id))
            return

        stateService.set_current_state(user_id, StateTypes.Default)

        wait_message = await message.answer(
            f"**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–¢–µ–º–∞: {topic}\n–°—Ç–∏–ª—å: {style}\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: *3-5 –º–∏–Ω—É—Ç*.\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º."
        )

        await message.bot.send_chat_action(message.chat.id, "typing")

        async def task_id_get(task_id: str):
            await message.answer(f"`1:suno:{task_id}:generate`")
            await message.answer(
                f"""–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.
                                
–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
"""
            )

        generation = await sunoService.generate_suno(topic, style, task_id_get)

        # Check if generation failed or returned no data
        if not generation or not generation.get('data'):
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –°–µ—Ä–≤–∏—Å Diffrhythm –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (15 –º–∏–Ω—É—Ç)\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –ª–∏—Ä–∏–∫–∏\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–º—É/—Å—Ç–∏–ª—å –ø–µ—Å–Ω–∏."
            )
            sunoService.clear_user_data(str(user_id))
            return
            
        status = generation.get('data', {}).get('status')
        
        # Handle failed generations with proper error messages
        if status == "failed":
            error_info = generation.get('data', {}).get('error', {})
            if error_info:
                human_readable_error = sunoService.get_human_readable_error(error_info)
                await message.answer(human_readable_error)
            else:
                await message.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            sunoService.clear_user_data(str(user_id))
            return

        # Handle completed generations
        if status == "completed":
            await suno_create_messages(message, generation)
            await tokenizeService.update_token(user_id, 5700, "subtract")
            await message.answer(
                f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ *Suno*: *5700*

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
"""
            )
        else:
            await message.answer(
                "‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è –Ω–µ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ."
            )

        await wait_message.delete()

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        sunoService.clear_user_data(str(user_id))

    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to generate Suno: {e}")
        stateService.set_current_state(user_id, StateTypes.Default)
        sunoService.clear_user_data(str(user_id))
        return


@sunoRouter.message(TextCommand([suno_command(), suno_text()]))
async def suno_prepare_handler(message: Message):
    user_id = message.from_user.id
    await enter_suno_state(user_id, message)


@sunoRouter.callback_query(StartWithQuery("suno-generate"))
async def suno_prepare_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await enter_suno_state(user_id, callback_query.message)


@sunoRouter.callback_query(StartWithQuery("cancel-suno-generate"))
async def cancel_state(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    stateService.set_current_state(user_id, StateTypes.Default)
    sunoService.clear_user_data(str(user_id))
    await callback_query.message.delete()
    await callback_query.answer("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤ Suno —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!")


async def enter_suno_state(user_id, message: Message):
    stateService.set_current_state(user_id, StateTypes.Suno)

    await message.answer(
        text="""*–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º* –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤ *Suno*.

*–°–ª–µ–¥—É—é—â–µ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ —Ç–µ–º–∞ –ø–µ—Å–Ω–∏* –¥–ª—è Suno.

–ü–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è —Ç–µ–º—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å *5700‚ö°Ô∏è*.

–û–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ *—Ç–µ–º—É* –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ (*–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤*), –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.
""",
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                        callback_data="cancel-suno-generate"
                    )
                ],
            ]
        ),
    )
