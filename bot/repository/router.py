import asyncio

from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from bot.commands import (
    repository_command, repository_text,
    show_repository_command, show_repository_text,
    clear_repository_command, clear_repository_text
)
from bot.filters import TextCommand
from services.repository_service import repositoryService
from services.state_service import stateService, StateTypes

repositoryRouter = Router()


@repositoryRouter.message(TextCommand([repository_command(), repository_text()]))
async def handle_set_repository(message: Message):
    """Handle /repo command to set repository URL"""
    user_id = str(message.from_user.id)
    
    # Check if URL is provided with the command
    text_parts = message.text.split(' ', 1)
    if len(text_parts) > 1:
        repository_url = text_parts[1].strip()
        
        # Validate the GitHub URL
        if repositoryService.validate_github_url(repository_url):
            repositoryService.set_current_repository(user_id, repository_url)
            repo_info = repositoryService.parse_repository_info(repository_url)
            
            await message.answer(f"""‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

üìÅ **{repo_info['full_name']}**
üîó {repo_info['url']}

–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.""")
        else:
            await message.answer("""‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: https://github.com/owner/repository

**–ü—Ä–∏–º–µ—Ä:**
/repo https://github.com/torvalds/linux""")
    else:
        await message.answer("""üìÅ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è**

–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/repo <URL_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>`

**–ü—Ä–∏–º–µ—Ä:**
/repo https://github.com/torvalds/linux

**–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
/show_repo - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
/clear_repo - –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π""")


@repositoryRouter.message(TextCommand([show_repository_command(), show_repository_text()]))
async def handle_show_repository(message: Message):
    """Handle /show_repo command to show current repository"""
    user_id = str(message.from_user.id)
    repository_url = repositoryService.get_current_repository(user_id)
    
    if repository_url:
        repo_info = repositoryService.parse_repository_info(repository_url)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", callback_data="clear_repository")]
            ]
        )
        
        await message.answer(f"""üìÅ **–¢–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**

üìã **{repo_info['full_name']}**
üîó {repo_info['url']}

–ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö.""", reply_markup=keyboard)
    else:
        await message.answer("""üìÅ **–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**

–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
`/repo <URL_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>`

**–ü—Ä–∏–º–µ—Ä:**
/repo https://github.com/torvalds/linux""")


@repositoryRouter.message(TextCommand([clear_repository_command(), clear_repository_text()]))
async def handle_clear_repository(message: Message):
    """Handle /clear_repo command to clear repository"""
    user_id = str(message.from_user.id)
    repository_url = repositoryService.get_current_repository(user_id)
    
    if repository_url:
        repositoryService.clear_current_repository(user_id)
        await message.answer("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    else:
        await message.answer("üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@repositoryRouter.callback_query(lambda c: c.data == "clear_repository")
async def handle_clear_repository_callback(callback_query):
    """Handle clear repository callback from inline button"""
    user_id = str(callback_query.from_user.id)
    repositoryService.clear_current_repository(user_id)
    
    await callback_query.message.edit_text("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    await callback_query.answer("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—á–∏—â–µ–Ω")