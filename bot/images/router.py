import logging
import re

from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from bot.filters import TextCommand, StateCommand, StartWithQuery
from bot.gpt.utils import checked_text
from bot.commands import images_command, images_command_text
from bot.main_keyboard import create_main_keyboard
from bot.utils import divide_into_chunks
from bot.utils import send_photo_as_file, send_photo
from bot.constants import DEFAULT_ERROR_MESSAGE
from bot.empty_prompt import is_empty_prompt
from services import stateService, StateTypes, imageService, tokenizeService
from services.image_utils import image_models_values, samplers_values, \
    steps_values, cgf_values, size_values

imagesRouter = Router()

# Confirmed banned words from error data
confirmed_banned_words = [
    "blood",
    "chest",
    "cutting",
    "dick",
    "flesh",
    "miniskirt",
    "naked",
    "nude",
    "provocative",
    "sex",
    "sexy",
    "shirtless",
    "shit",
    "succubus",
    "trump"
]

# Unconfirmed banned words from provided sources, categorized
unconfirmed_banned_words = {
    "gore_words": [
        "blood", "bloodbath", "crucifixion", "bloody", "flesh", "bruises", "car crash", "corpse",
        "crucified", "cutting", "decapitate", "infested", "gruesome", "kill", "infected", "sadist",
        "slaughter", "teratoma", "tryphophobia", "wound", "cronenberg", "khorne", "cannibal",
        "cannibalism", "visceral", "guts", "bloodshot", "gory", "killing", "surgery", "vivisection",
        "massacre", "hemoglobin", "suicide"
    ],
    "adult_words": [
        "ahegao", "pinup", "ballgag", "playboy", "bimbo", "pleasure", "bodily fluids", "pleasures",
        "boudoir", "rule34", "brothel", "seducing", "dominatrix", "seductive", "erotic seductive",
        "fuck", "sensual", "hardcore", "sexy", "hentai", "shag", "horny", "shibari", "incest",
        "smut", "jav", "succubus", "jerk off king at pic", "thot", "kinbaku", "transparent",
        "submissive", "dominant", "nasty", "indecent", "legs spread", "cussing", "flashy", "twerk",
        "making love", "voluptuous", "naughty", "wincest", "orgy", "sultry", "xxx", "bondage",
        "bdsm", "dog collar", "slavegirl", "transparent and translucent"
    ],
    "body_parts_words": [
        "arse", "labia", "ass", "mammaries", "human centipede", "badonkers", "minge", "massive chests",
        "big ass", "mommy milker", "booba", "nipple", "booty", "oppai", "bosom", "melons", "bulging",
        "coochie", "head", "engorged", "organs", "breasts", "ovaries", "busty", "penis", "clunge",
        "phallus", "crotch", "sexy female", "dick", "skimpy", "girth", "thick", "honkers", "vagina",
        "hooters", "veiny", "knob", "seductress", "shaft"
    ],
    "nudity_words": [
        "no clothes", "speedo", "au naturale", "no shirt", "bare chest", "nude", "barely dressed",
        "bra", "risqu√©", "clear", "scantily", "clad", "cleavage", "stripped", "full frontal unclothed",
        "invisible clothes", "wearing nothing", "lingerie with no shirt", "naked", "without clothes on",
        "negligee", "zero clothes"
    ],
    "taboo_words": [
        "taboo", "fascist", "nazi", "prophet mohammed", "slave", "coon", "honkey", "arrested", "jail",
        "handcuffs", "torture", "disturbing", "1488"
    ],
    "drugs_words": [
        "drugs", "cocaine", "heroin", "meth", "crack"
    ],
    "other_words": [
        "farts", "fart", "poop", "warts", "xi jinping", "shit", "pleasure", "errect", "big black",
        "brown pudding", "bunghole", "vomit", "voluptuous", "seductive", "sperm", "hot", "sexy",
        "plebeian", "sensored", "censored", "uncouth", "silenced", "deepfake", "inappropriate",
        "pus", "waifu", "mp5", "succubus", "surgery"
    ]
}

# Create a single set of all banned words for efficient lookup
banned_words_set = set(confirmed_banned_words)
for category_words in unconfirmed_banned_words.values():
    banned_words_set.update(category_words)

def is_banned_word(word):
    """Check if a word or phrase is in the banned words set.

    Args:
        word (str): The word or phrase to check.

    Returns:
        bool: True if the word is banned, False otherwise.
    """
    return word.lower() in banned_words_set

def get_banned_words(text):
    words = text.split(" ")
    words = [word.lower() for word in words]
    banned_words_in_request = [word for word in words if is_banned_word(word)]
    return banned_words_in_request

# # Example usage
# if __name__ == "__main__":
#     test_words = ["blood", "sexy", "dog", "naked", "torture", "hello", "succubus"]
#     for test_word in test_words:
#         if is_banned_word(test_word):
#             print(f"'{test_word}' is banned")
#         else:
#             print(f"'{test_word}' is not banned")

@imagesRouter.message(StateCommand(StateTypes.Image))
async def handle_generate_image(message: types.Message):
    user_id = message.from_user.id

    try:
        if not stateService.is_image_state(user_id):
            return
        
        tokens = await tokenizeService.get_tokens(user_id)
        if tokens.get("tokens") < 0:
            await message.answer("""
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç *‚ö°Ô∏è*. üòî

/balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å
/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ *‚ö°Ô∏è*!       
""")
            stateService.set_current_state(user_id, StateTypes.Default)
            return
        
        if (is_empty_prompt(message.text)):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-sd-generate"
                            )
                        ]
                    ],
                )
            )
            return

        stateService.set_current_state(user_id, StateTypes.Default)

        wait_message = await message.answer("**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 15-30 —Å–µ–∫—É–Ω–¥.")

        await message.bot.send_chat_action(message.chat.id, "typing")

        imageService.set_waiting_image(user_id, True)

        await message.bot.send_chat_action(message.chat.id, "typing")

        async def wait_image():
            await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—à–ª–∞ –≤ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º. \n"
                                 "–ü—Ä–∏—à–ª–µ–º –≤–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 40-120 —Å–µ–∫—É–Ω–¥. \n"
                                 "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º üòâ")

        image = await imageService.generate(message.text, user_id, wait_image)

        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.reply_photo(image["output"][0])
        await send_photo_as_file(message, image["output"][0], "–í–æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ")
        await tokenizeService.update_token(user_id, 30, "subtract")
        await message.answer(f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Stable Diffusion 30‚ö°Ô∏è

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
""")
        await wait_message.delete()

    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to generate image: {e}")

    imageService.set_waiting_image(user_id, False)
    stateService.set_current_state(user_id, StateTypes.Default)


@imagesRouter.message(StateCommand(StateTypes.Flux))
async def handle_generate_image(message: types.Message):
    user_id = message.from_user.id

    try:
        if not stateService.is_flux_state(user_id):
            return
        
        tokens = await tokenizeService.get_tokens(user_id)
        if tokens.get("tokens") < 0:
            await message.answer("""
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç *‚ö°Ô∏è*. üòî
                                 
/balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å
/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ *‚ö°Ô∏è*!
""")
            stateService.set_current_state(user_id, StateTypes.Default)
            return
        
        if (is_empty_prompt(message.text)):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-flux-generate"
                            )
                        ]
                    ],
                )
            )
            return

        stateService.set_current_state(user_id, StateTypes.Default)

        wait_message = await message.answer("**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 15-30 —Å–µ–∫—É–Ω–¥.")

        await message.bot.send_chat_action(message.chat.id, "typing")

        imageService.set_waiting_image(user_id, True)

        await message.bot.send_chat_action(message.chat.id, "typing")

        async def task_id_get(task_id: str):
            await message.answer(f"`1:flux:{task_id}:generate`")
            await message.answer(f"""–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.
                                 
–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
""")

        result = await imageService.generate_flux(user_id, message.text, task_id_get)

        image = result['data']["output"]["image_url"]

        await message.bot.send_chat_action(message.chat.id, "typing")
        await message.reply_photo(image)
        await send_photo_as_file(message, image, "–í–æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ")
        await message.answer(text="C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Flux –µ—â–µ? üî•", reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                        callback_data="flux-generate"
                    )
                ]
            ],
        ))

        model = imageService.get_flux_model(user_id)

        energy = 600

        if model == "Qubico/flux1-dev":
            energy = 2000

        await tokenizeService.update_token(user_id, energy, "subtract")
        await message.answer(f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Flux {energy}‚ö°Ô∏è 

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
""")
        await wait_message.delete()

    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to generate Flux image: {e}")

    imageService.set_waiting_image(user_id, False)
    stateService.set_current_state(message.from_user.id, StateTypes.Default)


@imagesRouter.message(StateCommand(StateTypes.Dalle3))
async def handle_generate_image(message: types.Message):
    user_id = message.from_user.id

    try:
        if not stateService.is_dalle3_state(user_id):
            return

        tokens = await tokenizeService.get_tokens(user_id)
        if tokens.get("tokens") < 0:
            await message.answer("""
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç *‚ö°Ô∏è*. üòî

/balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å
/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ *‚ö°Ô∏è*!       
""")
            stateService.set_current_state(user_id, StateTypes.Default)
            return
        
        if (is_empty_prompt(message.text)):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-dalle-generate"
                            )
                        ]
                    ],
                )
            )
            return

        stateService.set_current_state(user_id, StateTypes.Default)

        wait_message = await message.answer("**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 15-30 —Å–µ–∫—É–Ω–¥.")

        await message.bot.send_chat_action(message.chat.id, "typing")

        imageService.set_waiting_image(user_id, True)

        await message.bot.send_chat_action(message.chat.id, "typing")

        image = await imageService.generate_dalle(user_id, message.text)

        await message.bot.send_chat_action(message.chat.id, "typing")

        await message.answer(image["text"])
        await message.reply_photo(image["image"])
        await send_photo_as_file(message, image["image"], "–í–æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ")
        await message.answer(text="C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å DALL¬∑E 3 –µ—â–µ? üî•", reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                        callback_data="dalle-generate"
                    )
                ]
            ],
        ))

        await wait_message.delete()

        await tokenizeService.update_token(user_id, image["total_tokens"] * 2, "subtract")
        await message.answer(f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è DALL¬∑E 3 *{image["total_tokens"] * 2}*‚ö°Ô∏è

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
""")
    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to generate DALL¬∑E 3 image: {e}")
        stateService.set_current_state(user_id, StateTypes.Default)


async def send_variation_image(message, image, task_id):
    await send_photo(
        message,
        image,
        """–ù–æ–º–µ—Ä–∞ –≤–∞—Ä–∏–∞—Ü–∏–π:
```
+-------+-------+
|   1   |   2   |
+-------+-------+
|   3   |   4   |
+-------+-------+
```

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
U - –£–≤–µ–ª–∏—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Upscale)
V - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Variation)

–ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–¥ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –Ω–æ–º–µ—Ä–æ–º.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
""",
        ext=".png",
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="U1", callback_data=f'upscale-midjourney {task_id} 1'),
                    InlineKeyboardButton(text="U2", callback_data=f'upscale-midjourney {task_id} 2'),
                    InlineKeyboardButton(text="V1", callback_data=f'variation-midjourney {task_id} 1'),
                    InlineKeyboardButton(text="V2", callback_data=f'variation-midjourney {task_id} 2'),
                ],
                [
                    InlineKeyboardButton(text="U3", callback_data=f'upscale-midjourney {task_id} 3'),
                    InlineKeyboardButton(text="U4", callback_data=f'upscale-midjourney {task_id} 4'),
                    InlineKeyboardButton(text="V3", callback_data=f'variation-midjourney {task_id} 3'),
                    InlineKeyboardButton(text="V4", callback_data=f'variation-midjourney {task_id} 4'),
                ],
            ],

        )
    )


@imagesRouter.message(StateCommand(StateTypes.Midjourney))
async def handle_generate_image(message: types.Message):
    user_id = message.from_user.id

    main_keyboard = create_main_keyboard()

    try:
        if not stateService.is_midjourney_state(user_id):
            return

        tokens = await tokenizeService.get_tokens(user_id)
        if tokens.get("tokens") < 0:
            await message.answer("""
–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç *‚ö°Ô∏è*. üòî

/balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å
/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ *‚ö°Ô∏è*!       
""", reply_markup=main_keyboard)
            stateService.set_current_state(user_id, StateTypes.Default)
            return

        if (is_empty_prompt(message.text)):
            await message.answer(
                "üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-midjourney-generate"
                            )
                        ]
                    ],
                )
            )
            return

        # Check for prompts starting with "/" which are not accepted by Midjourney
        if message.text.strip().startswith('/'):
            await message.answer(
                """üö´ –ó–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "/", –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è Midjourney.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: "–°–∏–±–∏—Ä—Å–∫–∏–π –∫–æ—Ç –µ—Å—Ç —Å—É–ø" –≤–º–µ—Å—Ç–æ "/image —Å–∏–±–∏—Ä—Å–∫–∏–π –∫–æ—Ç –µ—Å—Ç —Å—É–ø".""",
                reply_markup=InlineKeyboardMarkup(
                    resize_keyboard=True,
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                                callback_data="cancel-midjourney-generate"
                            )
                        ]
                    ],
                )
            )
            return

        banned_words_in_request = get_banned_words(message.text)
        if banned_words_in_request:
            await message.answer(
                f"""üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: "{'", "'.join(banned_words_in_request)}".

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.
–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ª—é–±–æ–µ –∏–∑ —Å–ª–æ–≤ –±—ã–ª–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ä–∞–∑–¥–µ–ª *–û—à–∏–±–∫–∏* –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ @deepGPT.""",            
                reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                            callback_data="cancel-midjourney-generate"
                        )
                    ]
                ],
            ))
            return
        
        stateService.set_current_state(message.from_user.id, StateTypes.Default)

        wait_message = await message.answer("**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è *1-3 –º–∏–Ω—É—Ç—ã*.", reply_markup=main_keyboard)

        await message.bot.send_chat_action(message.chat.id, "typing")

        async def task_id_get(task_id: str):
            await message.answer(f"`1:midjourney:{task_id}:generate`")
            await message.answer(f"""–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
                                 
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.
                                 
–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.""")

        image = await imageService.generate_midjourney(user_id, message.text, task_id_get)

        await message.bot.send_chat_action(message.chat.id, "typing")

        await send_variation_image(
            message,
            image["task_result"]["discord_image_url"],
            image["task_id"]
        )

        await wait_message.delete()

        await tokenizeService.update_token(user_id, 4200, "subtract")
        await message.answer(f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Midjourney 4200‚ö°Ô∏è

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
""")
    except Exception as e:
        await message.answer(DEFAULT_ERROR_MESSAGE)
        logging.error(f"Failed to generate Midjourney image: {e}")
        stateService.set_current_state(message.from_user.id, StateTypes.Default)


@imagesRouter.callback_query(StartWithQuery("upscale-midjourney"))
async def upscale_midjourney_callback_query(callback: CallbackQuery):
    task_id = callback.data.split(" ")[1]
    index = callback.data.split(" ")[2]

    wait_message = await callback.message.answer("**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è *1-3 –º–∏–Ω—É—Ç—ã*.")

    async def task_id_get(task_id: str):
        await callback.message.answer(f"`1:midjourney:{task_id}:upscale`")
        await callback.message.answer(f"""–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
                                      
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.
                                      
–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.""")

    image = await imageService.upscale_image(task_id, index, task_id_get)

    await callback.message.reply_photo(image["task_result"]["discord_image_url"])
    await send_photo_as_file(
        callback.message,
        image["task_result"]["discord_image_url"],
        ext=".png",
        caption="–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"
    )
    await callback.message.answer(text="C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Midjourney –µ—â–µ?", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                    callback_data="midjourney-generate"
                )
            ]
        ],
    )
                                  )

    await tokenizeService.update_token(callback.from_user.id, 1600, "subtract")
    await callback.message.answer(f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Midjourney 1600‚ö°Ô∏è

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
""")

    await wait_message.delete()


@imagesRouter.callback_query(StartWithQuery("variation-midjourney"))
async def variation_midjourney_callback_query(callback: CallbackQuery):
    task_id = callback.data.split(" ")[1]
    index = callback.data.split(" ")[2]

    wait_message = await callback.message.answer("**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è *1-3 –º–∏–Ω—É—Ç—ã*.")

    async def task_id_get(task_id: str):
        await callback.message.answer(f"`1:midjourney:{task_id}:generate`")
        await callback.message.answer(f"""–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
                                      
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.
                                      
–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.""")

    image = await imageService.variation_image(task_id, index, task_id_get)

    await send_variation_image(
        callback.message,
        image["task_result"]["discord_image_url"],
        image["task_id"]
    )

    await tokenizeService.update_token(callback.from_user.id, 8700, "subtract")
    await callback.message.answer(f"""
ü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Midjourney 8700‚ö°Ô∏è

‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è
""")

    await wait_message.delete()

# –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∞–π—Å –ª–∏—Å—Ç–∞ –¥–ª—è Midjourney (–¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç)
#   - –ü–µ—Ä–≤–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 3300‚ö°Ô∏è
#   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π - 2500‚ö°Ô∏è
#   - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - 1000‚ö°Ô∏è

@imagesRouter.message(TextCommand([images_command(), images_command_text()]))
async def handle_start_generate_image(message: types.Message):
    await message.answer(text="""üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:

‚¶Å [Midjourney](https://en.wikipedia.org/wiki/Midjourney)
‚¶Å [DALL¬∑E 3](https://en.wikipedia.org/wiki/DALL-E)
‚¶Å [Flux](https://en.wikipedia.org/wiki/FLUX.1)
‚¶Å [Stable Diffusion](https://en.wikipedia.org/wiki/Stable_Diffusion)
""", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(text="Midjourney", callback_data="image-model Midjourney"),
                InlineKeyboardButton(text="DALL¬∑E 3", callback_data="image-model Dalle3"),
            ],
            [
                # todo –ø—Ä–∏–¥—É–º–∞—Ç—å callback data —É—Ç–∏–ª–∏—Ç—É
                InlineKeyboardButton(text="Flux", callback_data="image-model Flux"),
                InlineKeyboardButton(text="Stable Duffusion", callback_data="image-model SD"),
            ]
        ]),
        link_preview_options={"is_disabled": True})

    await message.bot.send_chat_action(message.chat.id, "typing")


async def generate_base_stable_diffusion_keyboard(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    current_image = imageService.get_current_image(user_id)
    current_size = imageService.get_size_model(user_id)
    current_steps = imageService.get_steps(user_id)
    current_cfg = imageService.get_cfg_model(user_id)

    await callback_query.message.edit_text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã *Stable Diffusion*:")
    await callback_query.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"–ú–æ–¥–µ–ª—å: {current_image}",
                    callback_data="image-model choose-model 0 5"
                )],
                [InlineKeyboardButton(
                    text=f"–†–∞–∑–º–µ—Ä: {current_size}",
                    callback_data="image-model choose-size 0 5"
                )],
                [
                    InlineKeyboardButton(
                        text=f"–®–∞–≥–∏: {current_steps}",
                        callback_data="image-model choose-steps"
                    ),
                    InlineKeyboardButton(
                        text=f"CFG Scale: {current_cfg}",
                        callback_data="image-model choose-cfg"
                    )
                ],
                [InlineKeyboardButton(
                    text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                    callback_data="sd-generate"
                )],
            ],

        )
    )

generate_button_name = 'C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'

async def generate_base_midjourney_keyboard(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    current_size = imageService.get_midjourney_size(user_id)

    def size_text(size: str):
        if current_size == size:
            return checked_text(size)
        return size

    await callback_query.message.edit_text(f"""–ü–∞—Ä–∞–º–µ—Ç—Ä—ã *Midjourney*:

–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –¢–µ–∫—É—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –≥–∞–ª–æ—á–∫–æ–π.

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É `{generate_button_name}`.
""")
    await callback_query.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=size_text("1:1"),
                        callback_data="image-model update-size-midjourney 1:1"
                    ),
                    InlineKeyboardButton(
                        text=size_text("2:3"),
                        callback_data="image-model update-size-midjourney 2:3"
                    ),
                    InlineKeyboardButton(
                        text=size_text("3:2"),
                        callback_data="image-model update-size-midjourney 3:2"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=size_text("4:5"),
                        callback_data="image-model update-size-midjourney 4:5"
                    ),
                    InlineKeyboardButton(
                        text=size_text("5:4"),
                        callback_data="image-model update-size-midjourney 5:4"
                    ),
                    InlineKeyboardButton(
                        text=size_text("4:7"),
                        callback_data="image-model update-size-midjourney 4:7"
                    ),
                    InlineKeyboardButton(
                        text=size_text("7:4"),
                        callback_data="image-model update-size-midjourney 7:4"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{generate_button_name} üî•",
                        callback_data="midjourney-generate"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data="cancel-midjourney-generate"
                    )
                ],
            ],

        )
    )


async def generate_base_dalle3_keyboard(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    current_size = imageService.get_dalle_size(user_id)

    def size_text(size: str):
        if current_size == size:
            return checked_text(size)
        return size

    await callback_query.message.edit_text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã *Dall-e-3*:")
    await callback_query.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=size_text("1024x1024"),
                    callback_data="image-model update-size-dalle 1024x1024"
                )],
                [InlineKeyboardButton(
                    text=size_text("1024x1792"),
                    callback_data="image-model update-size-dalle 1024x1792"
                )],
                [InlineKeyboardButton(
                    text=size_text("1792x1024"),
                    callback_data="image-model update-size-dalle 1792x1024"
                )],
                [InlineKeyboardButton(
                    text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                    callback_data="dalle-generate"
                )],
            ],

        )
    )


async def generate_base_flux_keyboard(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    current_model = imageService.get_flux_model(user_id)

    def model_text(model: str, text):
        if current_model == model:
            return checked_text(text)
        return text

    await callback_query.message.edit_text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã *Flux*:")
    await callback_query.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            resize_keyboard=True,
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=model_text("Qubico/flux1-dev", "–ú–æ–¥–µ–ª—å: Flux-Dev"),
                    callback_data="image-model update-flux-model Qubico/flux1-dev"
                )],
                [InlineKeyboardButton(
                    text=model_text("Qubico/flux1-schnell", "–ú–æ–¥–µ–ª—å: Flux-Schnell"),
                    callback_data="image-model update-flux-model Qubico/flux1-schnell"
                )],
                [InlineKeyboardButton(
                    text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•",
                    callback_data="flux-generate"
                )],
            ],

        )
    )


def normalize_start_index(index_start: int):
    return index_start if index_start > 0 else 0


def normalize_end_index(index_end: int, max_index: int):
    return index_end if index_end < max_index else max_index


@imagesRouter.callback_query(StartWithQuery("sd-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Image)
    await callback_query.message.answer("""
–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! ‚ÄçüñºÔ∏è

–ù–∞–ø—Ä–∏–º–µ—Ä: `an astronaut riding a horse on mars artstation, hd, dramatic lighting, detailed`
""", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                    callback_data="cancel-sd-generate"
                )
            ]
        ],
    ))
    
@imagesRouter.callback_query(StartWithQuery("cancel-sd-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Default)
    await callback_query.message.delete()
    await callback_query.answer("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Stable Diffusion —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!")


@imagesRouter.callback_query(StartWithQuery("flux-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Flux)
    await callback_query.message.answer("""
–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! ‚ÄçüñºÔ∏è

–ù–∞–ø—Ä–∏–º–µ—Ä: `an astronaut riding a horse on mars artstation, hd, dramatic lighting, detailed`
""", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                    callback_data="cancel-flux-generate"
                )
            ]
        ],
    ))
    
@imagesRouter.callback_query(StartWithQuery("cancel-flux-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Default)
    await callback_query.message.delete()
    await callback_query.answer("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Flux —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!")


@imagesRouter.callback_query(StartWithQuery("dalle-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Dalle3)
    await callback_query.message.answer("""
–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! ‚ÄçüñºÔ∏è

–ù–∞–ø—Ä–∏–º–µ—Ä: `–ù–∞—Ä–∏—Å—É–π —á–µ—Ä–Ω—É—é –¥—ã—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≥–ª–æ—â–∞–µ—Ç –≥–∞–ª–∞–∫—Ç–∏–∫–∏`
""", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                    callback_data="cancel-dalle-generate"
                )
            ]
        ],
    ))

@imagesRouter.callback_query(StartWithQuery("cancel-dalle-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Default)
    await callback_query.message.delete()
    await callback_query.answer("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ DALL¬∑E 3 –æ—Ç–º–µ–Ω–µ–Ω.")


@imagesRouter.callback_query(StartWithQuery("midjourney-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Midjourney)
    await callback_query.message.delete()
    await callback_query.message.answer("""
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É.
""", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            # [KeyboardButton(text="–§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —á—ë—Ä–Ω–∞—è –¥—ã—Ä–∞ –≤ –∫–æ—Å–º–æ—Å–µ, –ø–æ–≥–ª–æ—â–∞—é—â–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∏.")],
            [KeyboardButton(text="Photorealistic black hole in space, absorbing galaxies.")],
            # [KeyboardButton(text="City skyline at night, futuristic, neon lights, high detail.")],
            [KeyboardButton(text="–°–∏–ª—É—ç—Ç –≥–æ—Ä–æ–¥–∞ –Ω–æ—á—å—é, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, –Ω–µ–æ–Ω–æ–≤—ã–µ –æ–≥–Ω–∏, –≤—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è.")],
            [KeyboardButton(text="An astronaut riding a horse on mars artstation, hd, dramatic lighting, detailed.")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    ))

    await callback_query.message.answer(""" 
–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ, –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ù–∞–ø—Ä–∏–º–µ—Ä: "–≥–æ—Ä–æ–¥" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –≥–æ—Ä–æ–¥ –∏–∑ –†–æ—Å—Å–∏–∏, –∞ "city" –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∫–∞–∫ –≥–æ—Ä–æ–¥ –∏–∑ –°–®–ê –∏–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã.
""", reply_markup=InlineKeyboardMarkup(
        resize_keyboard=True,
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞ ‚ùå",
                    callback_data="cancel-midjourney-generate"
                )
            ]
        ],
    ))

@imagesRouter.callback_query(StartWithQuery("cancel-midjourney-generate"))
async def handle_image_model_query(callback_query: CallbackQuery):
    stateService.set_current_state(callback_query.from_user.id, StateTypes.Default)
    await callback_query.message.delete()
    main_keyboard = create_main_keyboard()
    await callback_query.message.answer("–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Midjourney —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!", reply_markup=main_keyboard)

@imagesRouter.callback_query(StartWithQuery("image-model"))
async def handle_image_model_query(callback_query: CallbackQuery):
    model = callback_query.data.split(" ")[1]

    user_id = callback_query.from_user.id

    if model == "SD":
        await generate_base_stable_diffusion_keyboard(callback_query)

    if model == "Dalle3":
        await generate_base_dalle3_keyboard(callback_query)

    if model == "Midjourney":
        await generate_base_midjourney_keyboard(callback_query)

    if model == "Flux":
        await generate_base_flux_keyboard(callback_query)

    if model == "update-flux-model":
        value = callback_query.data.split(" ")[2]

        imageService.set_flux_model(user_id, value)

        await generate_base_flux_keyboard(callback_query)

    if model == "update-size-midjourney":
        size = callback_query.data.split(" ")[2]

        imageService.set_midjourney_size(user_id, size)

        await generate_base_midjourney_keyboard(callback_query)

    if model == "update-size-dalle":
        dalle_size = callback_query.data.split(" ")[2]

        imageService.set_dalle_size(user_id, dalle_size)

        await generate_base_dalle3_keyboard(callback_query)

    if model == "update-model":
        model = callback_query.data.split(" ")[2]

        imageService.set_current_image(user_id, model)

        await generate_base_stable_diffusion_keyboard(callback_query)

    if model == "update-sampler":
        model = callback_query.data.split(" ")[2]
        print(model)

        imageService.set_sampler_state(user_id, model)

        await generate_base_stable_diffusion_keyboard(callback_query)

    if model == "choose-model":
        index_start_data = int(callback_query.data.split(" ")[2])
        index_end_data = int(callback_query.data.split(" ")[3])

        stable_models = list(
            map(lambda x: [InlineKeyboardButton(text=x, callback_data=f"image-model update-model {x}")],
                image_models_values))

        index_start = normalize_start_index(index_start_data)
        index_end = normalize_end_index(index_end_data, len(stable_models))

        copy_stable_models = stable_models[index_start:index_end]

        copy_stable_models.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                                        callback_data=f"image-model SD")])

        if index_start != 0:
            copy_stable_models.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                                            callback_data=f"image-model choose-model {normalize_start_index(index_start - 5)} {index_start}")])

        if index_end != len(stable_models):
            copy_stable_models.append([InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                                                            callback_data=f"image-model choose-model {index_start + 5} {normalize_end_index(index_end + 5, len(stable_models))}")])

        start_page = int(index_start / 5) + 1
        end_page = int(len(stable_models) / 5) + 1

        await callback_query.message.edit_text(f"""
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ *{start_page}* –∏–∑ *{end_page}*
üëæ –ú–æ–¥–µ–ª–∏ Stable Diffusion: 
        
        """)
        await callback_query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=copy_stable_models
            )
        )

    if model == "update-size":
        size = callback_query.data.split(" ")[2]

        imageService.set_size_state(user_id, size)

        await generate_base_stable_diffusion_keyboard(callback_query)

    if model == "choose-size":
        keyboard = divide_into_chunks(
            list(
                map(lambda x: InlineKeyboardButton(text=str(x), callback_data=f"image-model update-size {x}"),
                    size_values)),
            2
        )

        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                              callback_data=f"image-model SD")])

        await callback_query.message.edit_text("üëæ –®–∞–≥–∏ Stable Diffusion: ")
        await callback_query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=keyboard
            )
        )

    if model == "choose-sampler":
        index_start_data = int(callback_query.data.split(" ")[2])
        index_end_data = int(callback_query.data.split(" ")[3])

        stable_models = list(
            map(lambda x: [InlineKeyboardButton(text=x, callback_data=f"image-model update-sampler {x}")],
                samplers_values))

        index_start = normalize_start_index(index_start_data)
        index_end = normalize_end_index(index_end_data, len(stable_models))

        copy_stable_models = stable_models[index_start:index_end]

        copy_stable_models.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                                        callback_data=f"image-model SD")])

        start_page = int(index_start / 5) + 1
        end_page = int(len(stable_models) / 5) + 1

        if index_start != 0:
            copy_stable_models.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                                            callback_data=f"image-model choose-sampler {normalize_start_index(index_start - 5)} {index_start}")])

        if index_end != len(stable_models):
            copy_stable_models.append([InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                                                            callback_data=f"image-model choose-sampler {index_start + 5} {normalize_end_index(index_end + 5, len(stable_models))}")])

        await callback_query.message.edit_text(f"""
    üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ *{start_page}* –∏–∑ *{end_page}*
    üëæ –°—ç–º–ø–ª–µ—Ä—ã Stable Diffusion: 

            """)
        await callback_query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=copy_stable_models
            )
        )

    if model == "update-step":
        model = callback_query.data.split(" ")[2]

        imageService.set_steps_state(user_id, model)

        await generate_base_stable_diffusion_keyboard(callback_query)

    if model == "choose-steps":
        keyboard = divide_into_chunks(
            list(
                map(lambda x: InlineKeyboardButton(text=str(x), callback_data=f"image-model update-step {x}"),
                    steps_values)),
            4
        )

        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                              callback_data=f"image-model SD")])

        await callback_query.message.edit_text("üëæ –®–∞–≥–∏ Stable Diffusion: ")
        await callback_query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=keyboard
            )
        )

    if model == "update-cfg":
        model = callback_query.data.split(" ")[2]

        imageService.set_cfg_state(user_id, model)

        await generate_base_stable_diffusion_keyboard(callback_query)

    if model == "choose-cfg":
        keyboard = divide_into_chunks(
            list(
                map(lambda x: InlineKeyboardButton(text=str(x), callback_data=f"image-model update-cfg {x}"),
                    cgf_values)),
            4
        )

        keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                              callback_data=f"image-model SD")])

        await callback_query.message.edit_text("üëæ CFG Scale Stable Diffusion: ")
        await callback_query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(
                resize_keyboard=True,
                inline_keyboard=keyboard
            )
        )
