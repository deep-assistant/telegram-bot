import logging
from datetime import datetime, timezone

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from bot.filters import TextCommand
from bot.gpt.utils import send_markdown_message
from .service import ErrorReportingService

errorReportingRouter = Router()


def is_admin(user_id: int) -> bool:
    """Check if user is an administrator"""
    service = ErrorReportingService()
    return user_id in service.admin_user_ids


@errorReportingRouter.message(Command("errors"))
async def handle_errors_command(message: Message):
    """Show recent error reports (admin only)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service = ErrorReportingService()
    errors = await service.get_recent_errors(limit=5)
    
    if not errors:
        await message.answer("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    response_lines = ["üîç **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:**", ""]
    
    for i, error in enumerate(errors[:5], 1):
        timestamp = datetime.fromisoformat(error['timestamp']).strftime('%d.%m.%Y %H:%M:%S')
        context = error['context']
        
        response_lines.extend([
            f"**{i}. {error['exception_type']}**",
            f"üìÖ `{timestamp}`",
            f"üí¨ `{error['exception_message'][:100]}{'...' if len(error['exception_message']) > 100 else ''}`"
        ])
        
        if context.get('user_id'):
            response_lines.append(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{context['user_id']}`")
        if context.get('chat_id'):
            response_lines.append(f"üí≠ –ß–∞—Ç: `{context['chat_id']}`")
        
        response_lines.append("")
    
    response_lines.extend([
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/error_detail <–Ω–æ–º–µ—Ä>` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/clear_errors` –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∂—É—Ä–Ω–∞–ª–∞"
    ])
    
    response = '\n'.join(response_lines)
    await send_markdown_message(message, response)


@errorReportingRouter.message(Command("error_detail"))
async def handle_error_detail_command(message: Message):
    """Show detailed error information (admin only)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # Parse error number from command
    args = message.text.split()[1:] if message.text else []
    if not args or not args[0].isdigit():
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—à–∏–±–∫–∏: `/error_detail 1`")
        return
    
    error_num = int(args[0])
    service = ErrorReportingService()
    errors = await service.get_recent_errors(limit=10)
    
    if error_num < 1 or error_num > len(errors):
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {error_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    error = errors[error_num - 1]
    
    # Format detailed error message
    timestamp = datetime.fromisoformat(error['timestamp']).strftime('%d.%m.%Y %H:%M:%S UTC')
    context = error['context']
    
    response_lines = [
        f"üîç **–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ #{error_num}**",
        "",
        f"**–í—Ä–µ–º—è:** `{timestamp}`",
        f"**–¢–∏–ø:** `{error['exception_type']}`",
        f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** `{error['exception_message']}`",
        "",
        "**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**"
    ]
    
    for key, value in context.items():
        if value is not None:
            response_lines.append(f"‚Ä¢ {key}: `{value}`")
    
    # Add traceback
    response_lines.extend([
        "",
        "**–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:**",
        f"```\n{error['traceback']}\n```"
    ])
    
    response = '\n'.join(response_lines)
    
    # Handle message length limit
    if len(response) > 4000:
        # Send traceback as a separate message
        context_response = '\n'.join(response_lines[:-3])
        await send_markdown_message(message, context_response)
        
        traceback_response = f"**–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ #{error_num}:**\n```\n{error['traceback']}\n```"
        await send_markdown_message(message, traceback_response)
    else:
        await send_markdown_message(message, response)


@errorReportingRouter.message(Command("clear_errors"))
async def handle_clear_errors_command(message: Message):
    """Clear error log (admin only)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service = ErrorReportingService()
    success = await service.clear_error_log()
    
    if success:
        await message.answer("‚úÖ –ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ –æ—á–∏—â–µ–Ω.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫.")


@errorReportingRouter.message(Command("test_error"))
async def handle_test_error_command(message: Message):
    """Test error reporting (admin only)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # Trigger a test error
    raise RuntimeError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏")


@errorReportingRouter.message(Command("error_stats"))
async def handle_error_stats_command(message: Message):
    """Show error statistics (admin only)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service = ErrorReportingService()
    errors = await service.get_recent_errors(limit=100)  # Get more for statistics
    
    if not errors:
        await message.answer("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # Calculate statistics
    error_types = {}
    recent_errors = 0
    now = datetime.now(timezone.utc)
    
    for error in errors:
        # Count by type
        error_type = error['exception_type']
        error_types[error_type] = error_types.get(error_type, 0) + 1
        
        # Count recent errors (last 24 hours)
        error_time = datetime.fromisoformat(error['timestamp'])
        if (now - error_time).total_seconds() < 86400:  # 24 hours
            recent_errors += 1
    
    response_lines = [
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫**",
        "",
        f"üìà –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: `{len(errors)}`",
        f"üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: `{recent_errors}`",
        "",
        "**–ü–æ —Ç–∏–ø–∞–º:**"
    ]
    
    # Sort by frequency
    sorted_types = sorted(error_types.items(), key=lambda x: x[1], reverse=True)
    for error_type, count in sorted_types[:10]:  # Top 10
        response_lines.append(f"‚Ä¢ `{error_type}`: {count}")
    
    response = '\n'.join(response_lines)
    await send_markdown_message(message, response)