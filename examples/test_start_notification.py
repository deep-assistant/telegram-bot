#!/usr/bin/env python3
"""
Test script to verify the /start command notification functionality.
This script simulates the behavior to ensure first-time vs returning user detection works.
"""

import asyncio
import sys
import os

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.tokenize_service import tokenizeService

class MockUser:
    def __init__(self, user_id, username, full_name):
        self.id = user_id
        self.username = username
        self.full_name = full_name

async def test_first_time_detection():
    """Test if we can detect first-time users correctly"""
    print("Testing first-time user detection...")
    
    # Test with a mock user ID that likely doesn't exist
    test_user_id = 999999999
    
    try:
        # Check if user exists
        existing_tokens = await tokenizeService.get_user_tokens(test_user_id)
        is_first_start = existing_tokens is None
        
        print(f"User ID {test_user_id}:")
        print(f"  - Existing tokens: {existing_tokens}")
        print(f"  - Is first start: {is_first_start}")
        
        if is_first_start:
            print("  ‚úÖ Would send 'first time' notification")
        else:
            print("  ‚úÖ Would send 'returning user' notification")
            
    except Exception as e:
        print(f"  ‚ùå Error testing user detection: {e}")

def test_notification_messages():
    """Test the notification message formatting"""
    print("\nTesting notification message formatting...")
    
    # Mock user data
    user = MockUser(123456789, "testuser", "Test User")
    ref_user_id = "987654321"
    
    # Test first-time notification
    user_mention = f"<a href='tg://user?id={user.id}'>{user.full_name}</a>"
    first_time_text = f"""
üéâ –í–∞—à –¥—Ä—É–≥ {user_mention} (@{user.username}) –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!

–ß—Ç–æ–±—ã {user.full_name} —Å—Ç–∞–ª –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @gptDeep.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>5 000</b>‚ö°Ô∏è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –∏ <b>+500</b>‚ö°Ô∏èÔ∏è –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞.

–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —ç—Ç–æ–≥–æ –¥–æ–ª–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>. 
–ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ @deepGPT –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π.
"""
    
    print("First-time notification:")
    print(first_time_text)
    
    # Test returning user notification
    returning_text = f"""
üîÑ –í–∞—à –¥—Ä—É–≥ {user_mention} (@{user.username}) —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.

–ß—Ç–æ–±—ã –≤–∞—à–µ–º—É –¥—Ä—É–≥—É —Å—Ç–∞—Ç—å –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @gptDeep.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>5 000</b>‚ö°Ô∏è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –∏ <b>+500</b>‚ö°Ô∏èÔ∏è –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞.

–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —ç—Ç–æ–≥–æ –¥–æ–ª–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>. 
–ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ @deepGPT –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π.
"""
    
    print("\nReturning user notification:")
    print(returning_text)

async def main():
    """Main test function"""
    print("üß™ Testing /start notification functionality\n")
    
    test_notification_messages()
    await test_first_time_detection()
    
    print("\n‚úÖ Test completed!")

if __name__ == "__main__":
    asyncio.run(main())