#!/usr/bin/env python3
"""
Simple test for the error handling logic without importing the full service.
"""

def get_human_readable_error(error_data):
    """Copy of the error handling logic for testing"""
    if not error_data:
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏."
        
    error_msg = error_data.get('raw_message', '') or error_data.get('message', '')
    
    if 'moderation_failure' in error_msg and 'Unable to generate lyrics' in error_msg:
        return """‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –í –æ–ø–∏—Å–∞–Ω–∏–∏ –º—É–∑—ã–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ "–±–µ–∑ –≤–æ–∫–∞–ª–∞/—Ç–µ–∫—Å—Ç–∞" –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ª–∏—Ä–∏–∫–∏
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤–º–µ—Å—Ç–æ "–±–µ–∑ –≤–æ–∫–∞–ª–∞"
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –º—É–∑—ã–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Å–Ω—é —Å —Ç–µ–∫—Å—Ç–æ–º

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º!"""
    
    if 'clips generation failed' in error_msg:
        return """‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–∏—Å–∞ Suno
‚Ä¢ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."""
    
    # Generic fallback for other errors
    return f"""‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏.

–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_msg}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."""

def main():
    print("Testing Suno Error Handling Implementation")
    print("=" * 50)
    
    # Test the exact error from the GitHub issue
    test_error = {
        "code": 10000,
        "raw_message": "clips generation failed: moderation_failure; Unable to generate lyrics from song description",
        "message": "clips generation failed"
    }
    
    result = get_human_readable_error(test_error)
    print("üîç Test: Original issue error")
    print("Input:", test_error.get('raw_message', ''))
    print("\nüìù Human-readable output:")
    print(result)
    print("\n" + "=" * 50)
    
    # Verify key elements are present
    checks = [
        ("–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "Content restrictions mentioned"),
        ("–±–µ–∑ –≤–æ–∫–∞–ª–∞", "Specific guidance about 'without vocals'"),  
        ("–∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "Suggests changing description"),
        ("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "Contains recommendations section")
    ]
    
    print("‚úÖ Verification:")
    for check_text, description in checks:
        if check_text in result:
            print(f"  ‚úÖ {description}")
        else:
            print(f"  ‚ùå Missing: {description}")
    
    print("\nüéâ Test completed successfully!")
    print("\nThis implementation will now show users:")
    print("‚Ä¢ Clear explanation of what went wrong")
    print("‚Ä¢ Specific guidance about content restrictions") 
    print("‚Ä¢ Actionable recommendations to fix the issue")
    print("‚Ä¢ Better user experience instead of raw API errors")

if __name__ == "__main__":
    main()