import { Router } from 'aiogram';
import { InlineKeyboardButton, InlineKeyboardMarkup } from 'aiogram/types.js';
import { TextCommand, StateCommand, StartWithQuery } from '../filters.js';
import { SUNO_COMMAND, SUNO_TEXT } from '../commands.js';
import { isEmptyPrompt } from '../empty_prompt.js';
import { DEFAULT_ERROR_MESSAGE } from '../constants.js';
import { stateService, StateTypes, sunoService, tokenizeService } from '../../services/index.js';

export const sunoRouter = new Router();

// Render generated Suno clip messages
async function sunoCreateMessages(message, generation) {
  const clip = Object.values(generation.data.output.clips)[0];
  // send image
  await message.answerPhoto(clip.image_large_url, { caption: `–¢–µ–∫—Å—Ç *¬´${clip.title}¬ª*\n\n${clip.metadata.prompt}` });
  // send audio and video
  await message.answerDocument(clip.audio_url);
  await message.answerVideo(clip.video_url);
  // prompt to generate again
  await message.answer('C–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Suno –µ—â–µ? üî•', {
    reply_markup: new InlineKeyboardMarkup({
      resize_keyboard: true,
      inline_keyboard: [[
        new InlineKeyboardButton({ text: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å üî•', callback_data: 'suno-generate' })
      ]]
    })
  });
}

export { sunoCreateMessages };

// Handle Suno task fetch state
sunoRouter.message(
  StateCommand(StateTypes.Suno),
  async (message) => {
    const userId = message.from_user.id;
    if (!(await stateService.isSunoState(userId))) return;
    try {
      const tokens = await tokenizeService.get_tokens(userId);
      if (tokens.tokens < 0) {
        await message.answer(`–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç *‚ö°Ô∏è*. üòî\n\n/balance - ‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å\n/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n/referral - üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ *‚ö°Ô∏è*!`);
        await stateService.setCurrentState(userId, StateTypes.Default);
        return;
      }
      if (isEmptyPrompt(message.text)) {
        await message.answer(
          'üö´ –í –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
          { reply_markup: new InlineKeyboardMarkup({ inline_keyboard: [[
            new InlineKeyboardButton({ text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: 'cancel-suno-generate' })
          ]] }) }
        );
        return;
      }
      if (message.text.length > 200) {
        await message.answer(
          '–û–ø–∏—Å–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ üéµ *–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤* –¥–ª—è Suno.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–º—Ç –∫–æ—Ä–æ—á–µ.',
          { reply_markup: new InlineKeyboardMarkup({ inline_keyboard: [[
            new InlineKeyboardButton({ text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: 'cancel-suno-generate' })
          ]] }) }
        );
        return;
      }
      await stateService.setCurrentState(userId, StateTypes.Default);
      const waitMessage = await message.answer(`**‚åõÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...**\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: *3-5 –º–∏–Ω—É—Ç*.\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º`);
      await message.bot.sendChatAction(message.chat.id, 'typing');
      async function taskIdGet(taskId) {
        await message.answer(`\`1:suno:${taskId}:generate\``);
        await message.answer('–≠—Ç–æ ID –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–æ–º–µ–Ω—Ç.\n\n–í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.');
      }
      const generation = await sunoService.generateSuno(message.text, taskIdGet);
      await sunoCreateMessages(message, generation);
      await tokenizeService.update_user_token(userId, 5700, 'subtract');
      await message.answer(`\nü§ñ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ *Suno*: *5700*\n\n‚ùî /help - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ ‚ö°Ô∏è`);
      await waitMessage.delete();
    } catch (e) {
      console.error('Failed to generate Suno:', e);
      await message.answer(DEFAULT_ERROR_MESSAGE);
      await stateService.setCurrentState(userId, StateTypes.Default);
    }
  }
);

// Prepare Suno state on /suno or button
sunoRouter.message(
  TextCommand([SUNO_COMMAND, SUNO_TEXT]),
  async (message) => {
    await enterSunoState(message.from_user.id, message);
  }
);

sunoRouter.callbackQuery(
  StartWithQuery('suno-generate'),
  async (callbackQuery) => {
    await enterSunoState(callbackQuery.from_user.id, callbackQuery.message);
  }
);

// Cancel Suno generate mode
sunoRouter.callbackQuery(
  StartWithQuery('cancel-suno-generate'),
  async (callbackQuery) => {
    await stateService.setCurrentState(callbackQuery.from_user.id, StateTypes.Default);
    await callbackQuery.message.delete();
    await callbackQuery.answer('–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤ Suno —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!');
  }
);

// Enter Suno state helper
async function enterSunoState(userId, message) {
  await stateService.setCurrentState(userId, StateTypes.Suno);
  await message.answer(
    `*–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º* –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏ –≤ *Suno*.

*–°–ª–µ–¥—É—é—â–µ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç –¥–ª—è Suno* –∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å *5000‚ö°Ô∏è*.

–û–ø–∏—à–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é üéµ (*–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤*), –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.`,
    {
      parse_mode: 'Markdown',
      reply_markup: new InlineKeyboardMarkup({ inline_keyboard: [[
        new InlineKeyboardButton({ text: '–û—Ç–º–µ–Ω–∞ ‚ùå', callback_data: 'cancel-suno-generate' })
      ]] })
    }
  );
}
