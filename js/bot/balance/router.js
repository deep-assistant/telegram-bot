import { Composer } from 'grammy';
import { tokenizeService, referralsService } from '../../services/index.js';
import { createLogger } from '../../utils/logger.js';
import { config } from '../../config.js';

const logger = createLogger('balance_router');

export const balanceRouter = new Composer();

// Balance command handler
balanceRouter.command('balance', async (ctx) => {
  const userId = ctx.from.id;
  logger.debug('Balance command triggered for user:', userId);
  
  try {
    // Fetch token and referral info
    const gptTokens = await tokenizeService.get_tokens(userId);
    const referral = await referralsService.getReferral(userId);

    // Calculate next refill time
    const lastUpdate = new Date(referral.lastUpdate);
    const newDate = new Date(lastUpdate.getTime() + 24 * 60 * 60 * 1000);
    const currentDate = new Date();

    function getDate() {
      if (newDate.getDate() === currentDate.getDate()) {
        return `–°–µ–≥–æ–¥–Ω—è –≤ ${newDate.getHours()}:${String(newDate.getMinutes()).padStart(2, '0')}`;
      } else {
        return `–ó–∞–≤—Ç—Ä–∞ –≤ ${newDate.getHours()}:${String(newDate.getMinutes()).padStart(2, '0')}`;
      }
    }

    function getDateLine() {
      if ((gptTokens.tokens || 0) >= 30000) {
        return 'üïí –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ *30000*‚ö°Ô∏è';
      }
      return `üïí –°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç: *${getDate()}*`;
    }

    function acceptAccount() {
      return referral.isActivated
        ? 'üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
        : 'üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∑–∞–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!';
    }

    // Send balance info
    await ctx.reply(`üë©üèª‚Äçüíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *${referral.children.length}*
ü§ë –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üîã: *${referral.award}‚ö°Ô∏è*
${acceptAccount()}

${getDateLine()}

üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${gptTokens.tokens || 0}‚ö°Ô∏è*`);
  } catch (error) {
    logger.error('Error in balance command:', error);
    console.error('Full error details:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    if (config.isDev) process.exit(1);
  }
});

// Balance button handler (English)
balanceRouter.hears('‚ú® Balance', async (ctx) => {
  const userId = ctx.from.id;
  logger.debug('Balance button triggered for user:', userId);
  
  try {
    // Fetch token and referral info
    const gptTokens = await tokenizeService.get_tokens(userId);
    const referral = await referralsService.getReferral(userId);

    // Calculate next refill time
    const lastUpdate = new Date(referral.lastUpdate);
    const newDate = new Date(lastUpdate.getTime() + 24 * 60 * 60 * 1000);
    const currentDate = new Date();

    function getDate() {
      if (newDate.getDate() === currentDate.getDate()) {
        return `–°–µ–≥–æ–¥–Ω—è –≤ ${newDate.getHours()}:${String(newDate.getMinutes()).padStart(2, '0')}`;
      } else {
        return `–ó–∞–≤—Ç—Ä–∞ –≤ ${newDate.getHours()}:${String(newDate.getMinutes()).padStart(2, '0')}`;
      }
    }

    function getDateLine() {
      if ((gptTokens.tokens || 0) >= 30000) {
        return 'üïí –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ *30000*‚ö°Ô∏è';
      }
      return `üïí –°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç: *${getDate()}*`;
    }

    function acceptAccount() {
      return referral.isActivated
        ? 'üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
        : 'üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∑–∞–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!';
    }

    // Send balance info
    await ctx.reply(`üë©üèª‚Äçüíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *${referral.children.length}*
ü§ë –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üîã: *${referral.award}‚ö°Ô∏è*
${acceptAccount()}

${getDateLine()}

üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${gptTokens.tokens || 0}‚ö°Ô∏è*`);
  } catch (error) {
    logger.error('Error in balance button:', error);
    console.error('Full error details:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    if (config.isDev) process.exit(1);
  }
});

// Balance button handler (Russian)
balanceRouter.hears('‚ú® –ë–∞–ª–∞–Ω—Å', async (ctx) => {
  const userId = ctx.from.id;
  logger.debug('Balance button (Russian) triggered for user:', userId);
  
  try {
    // Fetch token and referral info
    const gptTokens = await tokenizeService.get_tokens(userId);
    const referral = await referralsService.getReferral(userId);

    // Calculate next refill time
    const lastUpdate = new Date(referral.lastUpdate);
    const newDate = new Date(lastUpdate.getTime() + 24 * 60 * 60 * 1000);
    const currentDate = new Date();

    function getDate() {
      if (newDate.getDate() === currentDate.getDate()) {
        return `–°–µ–≥–æ–¥–Ω—è –≤ ${newDate.getHours()}:${String(newDate.getMinutes()).padStart(2, '0')}`;
      } else {
        return `–ó–∞–≤—Ç—Ä–∞ –≤ ${newDate.getHours()}:${String(newDate.getMinutes()).padStart(2, '0')}`;
      }
    }

    function getDateLine() {
      if ((gptTokens.tokens || 0) >= 30000) {
        return 'üïí –ê–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ *30000*‚ö°Ô∏è';
      }
      return `üïí –°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç: *${getDate()}*`;
    }

    function acceptAccount() {
      return referral.isActivated
        ? 'üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
        : 'üîë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∑–∞–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!';
    }

    // Send balance info
    await ctx.reply(`üë©üèª‚Äçüíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *${referral.children.length}*
ü§ë –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üîã: *${referral.award}‚ö°Ô∏è*
${acceptAccount()}

${getDateLine()}

üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${gptTokens.tokens || 0}‚ö°Ô∏è*`);
  } catch (error) {
    logger.error('Error in balance button (Russian):', error);
    console.error('Full error details:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    if (config.isDev) process.exit(1);
  }
}); 