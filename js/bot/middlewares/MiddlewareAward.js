import { BaseMiddleware } from 'aiogram';
import { referralsService } from '../../services/referrals_service.js';

// Middleware to send referral award notifications
export class MiddlewareAward extends BaseMiddleware {
  async __call__(handler, event, data) {
    // Get referral awards for user
    const reward = await referralsService.getAwards(event.from_user.id);
    console.log('Referral reward:', reward);

    // If an award was granted, notify user and their referrers
    if (reward.isAward) {
      const updateParents = reward.updateParents || [];

      // Notify the user who just got awarded
      if (updateParents.length > 0) {
        await event.bot.sendMessage(event.from_user.id,
          `üéâ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –ø–æ–ª—É—á–∏–ª *10000‚ö°Ô∏è* –∏ *+500‚ö°Ô∏è* –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!

/balance - ‚ú® –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üîó –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤!`,
          { parse_mode: 'Markdown' }
        );
      }

      // Notify each parent who referred this user
      for (const parentId of updateParents) {
        await event.bot.sendMessage(parentId,
          `üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! 
–í—ã –ø–æ–ª—É—á–∏–ª–∏ *10000‚ö°Ô∏è* 
–ò *+500‚ö°Ô∏è* –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!

/balance - ‚ú® –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å
/referral - üîó –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏`,
          { parse_mode: 'Markdown' }
        );
      }
    }

    // Continue with next handler
    return handler(event, data);
  }
}
