import { Router } from 'aiogram';
import { InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice } from 'aiogram/types.js';
import { TextCommand, StartWithQuery } from '../filters.js';
import {
  PAYMENT_COMMAND_START,
  PAYMENT_COMMAND_TEXT,
  BALANCE_PAYMENT_COMMAND_TEXT,
  BALANCE_PAYMENT_COMMAND_START
} from '../commands.js';
import config from '../../config.js';
import { donationProduct, buyBalanceProduct } from './products.js';
import { GPTModels, tokenizeService } from '../../services/index.js';

export const paymentsRouter = new Router();

const donationText = `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! ü§©    
–°–∫–æ—Ä–æ –º—ã –±—É–¥–µ–º —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–æ–≤—ã–º –∏ –∫—Ä—É—Ç—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º!

–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:`;

// –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
const donationButtons = [
  [
    new InlineKeyboardButton({ text: '10 RUB', callback_data: 'donation 10' }),
    new InlineKeyboardButton({ text: '50 RUB', callback_data: 'donation 50' }),
    new InlineKeyboardButton({ text: '100 RUB', callback_data: 'donation 100' }),
  ],
  [
    new InlineKeyboardButton({ text: '150 RUB', callback_data: 'donation 150' }),
    new InlineKeyboardButton({ text: '250 RUB', callback_data: 'donation 250' }),
    new InlineKeyboardButton({ text: '500 RUB', callback_data: 'donation 500' }),
  ]
];

function paymentKeyboard(amount) {
  return new InlineKeyboardMarkup({ inline_keyboard: [[
    new InlineKeyboardButton({ text: `–û–ø–ª–∞—Ç–∏—Ç—å ${amount} ‚≠êÔ∏è`, pay: true })
  ]] });
}

function createBuyBalanceKeyboardModel() {
  return new InlineKeyboardMarkup({
    resize_keyboard: true,
    inline_keyboard: [[
      new InlineKeyboardButton({ text: 'ü§ñ GPT-4o', callback_data: `buy-gpt ${GPTModels.GPT_4o}` }),
      new InlineKeyboardButton({ text: 'ü¶æ GPT-3.5', callback_data: `buy-gpt ${GPTModels.GPT_3_5}` }),
    ]]
  });
}

function createBuyBalanceKeyboardMethod(model) {
  return new InlineKeyboardMarkup({
    resize_keyboard: true,
    inline_keyboard: [[
      new InlineKeyboardButton({ text: 'Telegram Stars ‚≠êÔ∏è', callback_data: `buy_method_stars ${model} stars` }),
      new InlineKeyboardButton({ text: '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π üí≥', callback_data: `buy_method_card ${model} card` }),
    ]]
  });
}

// /donut –∏ /donation –∫–æ–º–∞–Ω–¥—ã
paymentsRouter.message(
  TextCommand([PAYMENT_COMMAND_START, PAYMENT_COMMAND_TEXT]),
  async (message) => {
    await message.answer(donationText, {
      reply_markup: new InlineKeyboardMarkup({
        resize_keyboard: true,
        inline_keyboard: donationButtons
      })
    });
  }
);

// /buy –∫–æ–º–∞–Ω–¥—ã
paymentsRouter.message(
  TextCommand([BALANCE_PAYMENT_COMMAND_TEXT, BALANCE_PAYMENT_COMMAND_START]),
  async (message) => {
    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è GPT-4o
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
      reply_markup: createBuyBalanceKeyboardModel()
    });
  }
);

// –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
paymentsRouter.callbackQuery(
  StartWithQuery('back_buy_model'),
  async (callbackQuery) => {
    try {
      await callbackQuery.message.edit_text('–ë–∞–ª–∞–Ω—Å –∫–∞–∫–æ–π –º–æ–¥–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?');
      await callbackQuery.message.edit_reply_markup({ reply_markup: createBuyBalanceKeyboardModel() });
    } catch {}
  }
);

// –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
paymentsRouter.callbackQuery(
  StartWithQuery('back_buy_method'),
  async (callbackQuery) => {
    const model = callbackQuery.data.split(' ')[1];
    try {
      await callbackQuery.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã');
      await callbackQuery.message.edit_reply_markup({ reply_markup: createBuyBalanceKeyboardMethod(model) });
    } catch {}
  }
);

// –í—ã–±–æ—Ä Telegram Stars
paymentsRouter.callbackQuery(
  StartWithQuery('buy_method_stars'),
  async (callbackQuery) => {
    const model = callbackQuery.data.split(' ')[1];
    await callbackQuery.message.edit_text('–ù–∞—Å–∫–æ–ª—å–∫–æ ‚ö°Ô∏è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?');
    // –ø—Ä–∏–º–µ—Ä—ã: —Ç–æ–∫–µ–Ω—ã
    const prices = [25000, 50000, 100000, 250000, 500000, 1000000];
    const buttons = prices.map(p => [
      new InlineKeyboardButton({ text: `${p.toLocaleString()}‚ö°Ô∏è`, callback_data: `buy_stars ${p} ${model}` })
    ]);
    buttons.push([
      new InlineKeyboardButton({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã', callback_data: `back_buy_method ${model}` })
    ]);
    await callbackQuery.message.edit_reply_markup({ reply_markup: new InlineKeyboardMarkup({ inline_keyboard: buttons }) });
  }
);

// –í—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
paymentsRouter.callbackQuery(
  StartWithQuery('buy_method_card'),
  async (callbackQuery) => {
    const model = callbackQuery.data.split(' ')[1];
    await callbackQuery.message.edit_text('–ù–∞—Å–∫–æ–ª—å–∫–æ ‚ö°Ô∏è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?');
    const prices = [100000, 250000, 500000, 1000000, 2500000, 5000000];
    const buttons = prices.map(p => [
      new InlineKeyboardButton({ text: `${p.toLocaleString()}‚ö°Ô∏è`, callback_data: `buy_card ${p} ${model}` })
    ]);
    buttons.push([
      new InlineKeyboardButton({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã', callback_data: `back_buy_method ${model}` })
    ]);
    await callbackQuery.message.edit_reply_markup({ reply_markup: new InlineKeyboardMarkup({ inline_keyboard: buttons }) });
  }
);

// –û—Ç–ø—Ä–∞–≤–∫–∞ invoice –¥–ª—è Stars
paymentsRouter.callbackQuery(
  StartWithQuery('buy_stars'),
  async (callbackQuery) => {
    const tokens = callbackQuery.data.split(' ')[1];
    const model = callbackQuery.data.split(' ')[2];
    const amount = parseInt(tokens, 10);
    await callbackQuery.message.answer_invoice({
      title: '–ü–æ–∫—É–ø–∫–∞ ‚ö°Ô∏è',
      description: `–ö—É–ø–∏—Ç—å ${tokens}‚ö°Ô∏è?`,
      payload: `buy_balance ${tokens} ${model} stars`,
      provider_token: config.PAYMENTS_TOKEN,
      currency: 'XTR',
      prices: [ new LabeledPrice({ label: 'XTR', amount }) ]
    });
    await new Promise(r => setTimeout(r, 500));
    await callbackQuery.message.delete();
  }
);

// –û—Ç–ø—Ä–∞–≤–∫–∞ invoice –¥–ª—è –∫–∞—Ä—Ç—ã
paymentsRouter.callbackQuery(
  StartWithQuery('buy_card'),
  async (callbackQuery) => {
    const tokens = callbackQuery.data.split(' ')[1];
    const model = callbackQuery.data.split(' ')[2];
    const amount = parseInt(tokens, 10) * 100;
    await callbackQuery.message.bot.send_invoice(
      callbackQuery.message.chat.id,
      { ...buyBalanceProduct,
        description: `ü§© –ü–æ–∫—É–ø–∫–∞ ${tokens}‚ö°Ô∏è`,
        payload: `buy_balance ${tokens} ${model} card`,
        prices: [ new LabeledPrice({ label: `–ü–æ–∫—É–ø–∫–∞ ${tokens}‚ö°Ô∏è`, amount }) ]
      }
    );
    await new Promise(r => setTimeout(r, 500));
    await callbackQuery.message.delete();
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ donation
paymentsRouter.callbackQuery(
  StartWithQuery('donation'),
  async (callbackQuery) => {
    const amount = parseInt(callbackQuery.data.split(' ')[1], 10) * 100;
    await callbackQuery.message.bot.send_invoice(
      callbackQuery.message.chat.id,
      { ...donationProduct,
        prices: [ new LabeledPrice({ label: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ', amount }) ]
      }
    );
    await new Promise(r => setTimeout(r, 500));
    await callbackQuery.message.delete();
  }
);

// Pre-checkout
paymentsRouter.preCheckoutQuery((query) => true, async (preCheckoutQuery) => {
  await preCheckoutQuery.answerPreCheckoutQuery({ ok: true });
});

// –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
paymentsRouter.message(
  (message) => Boolean(message.successful_payment),
  async (message) => {
    const { successful_payment } = message;
    if (successful_payment.invoice_payload.startsWith('donation')) {
      const sum = successful_payment.total_amount / 100;
      await message.answer(`ü§© –ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É *${sum} ${successful_payment.currency}* –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! ü§©\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞!`);
    } else if (successful_payment.invoice_payload.startsWith('buy_balance')) {
      const parts = successful_payment.invoice_payload.split(' ');
      const tokens = parseInt(parts[1], 10);
      await tokenizeService.update_user_token(message.from_user.id, tokens, 'add');
      await message.answer(`ü§© –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ *${tokens}*‚ö°Ô∏è!`);
      const { tokens: newTokens } = await tokenizeService.get_tokens(message.from_user.id);
      await message.answer(`üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *${newTokens}‚ö°Ô∏è*`);
    }
  }
);
