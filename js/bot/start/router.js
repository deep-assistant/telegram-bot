import { StartWithQuery, TextCommand } from '../filters.js';
import { helpText, helpCommand, appCommand } from '../commands.js';
import { checkSubscription } from '../gpt/utils.js';
import { createMainKeyboard, sendMessage } from '../main_keyboard.js';
import { tokenizeService, referralsService } from '../../services/index.js';

// import { Router } from 'grammy';
import { Router } from '../grammy_stub.js';
import { InlineKeyboard } from '../grammy_stub.js';

// --- Original aiogram imports (commented out for reference) ---
// import { Router as AiogramRouter } from 'aiogram';
// import { CommandStart } from 'aiogram/filters.js';
// import { Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup } from 'aiogram/types.js';
// --------------------------------------------------------------

// Temporary lightweight stubs to keep existing code functional during migration.
// They replicate only the minimal interface currently used in this file.
const CommandStart = (...args) => {
  return (ctx) => {
    const text = ctx?.message?.text ?? '';
    return text.startsWith('/start');
  };
};
// GrammY uses regular objects for messages/callbacks, so we leave Message/CallbackQuery
// as aliases to plain objects to satisfy any type assumptions.
const Message = Object;
const CallbackQuery = Object;
// Inline keyboard helpers compatible with grammY
class InlineKeyboardButton {
  constructor({ text, url, callback_data }) {
    this.text = text;
    if (url) this.url = url;
    if (callback_data) this.callback_data = callback_data;
  }
}
class InlineKeyboardMarkup {
  constructor({ inline_keyboard }) {
    this.reply_markup = new InlineKeyboard(inline_keyboard.flat());
  }
}

export const startRouter = new Router();

const helloText = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ deep.foundation!

ü§ñ –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±–æ–π –∑–∞–¥–∞—á–µ–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é!

/help - ‚ú® –æ–±–∑–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
/balance - ‚ö°Ô∏è —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å
/referral - üîó –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏

–í—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–ª–∞—Ç–∏—Ç—å.
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —Å—É–º–º—É –æ—Ç *10 000‚ö°Ô∏è* (—ç–Ω–µ—Ä–≥–∏–∏)!

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ:
üíé –ú–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å Telegram –∑–≤—ë–∑–¥–∞–º–∏ –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π.
üë• –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ü–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! –ü—Ä–∏–≤–æ–¥—è –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ.

/referral - –ø–æ–ª—É—á–∞–π –±–æ–ª—å—à–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π:
*5 000‚ö°Ô∏èÔ∏è* –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
*+500‚ö°Ô∏èÔ∏è* –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞.

üè† –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º, –Ω–∞–ø–∏—à–∏ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ @deepGPT.`;

const refText = `üëã –¢—ã –ø—Ä–∏–±—ã–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª.`;

async function handleReferral(message, userId, refUserId) {
  const result = await referralsService.createReferral(userId, refUserId);
  console.log(result, 'resuuuuult');
  if (!refUserId) return;
  if (!result || result.parent == null) return;

  let chatId;
  try { chatId = parseInt(refUserId, 10); } catch { chatId = null; }
  if (!chatId) {
    await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID.');
    return;
  }

  await message.answer(`üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ *5 000*‚ö°Ô∏è!\n\n/balance - ‚ú® –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å\n/referral - üîó –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏`);

  await message.bot.sendMessage(chatId, `üéâ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! \n–í—ã –ø–æ–ª—É—á–∏–ª–∏ *5 000*‚ö°Ô∏è!\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—è–≤–∏—Ç—å –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, —á—Ç–æ–±—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –µ—â–µ *5 000*‚ö°Ô∏è –∏ +500‚ö°Ô∏èÔ∏è –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞.\n\n/balance - ‚ú® –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å\n/referral - üîó –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏`);
}

async function createTokenIfNotExist(userId) {
  return await tokenizeService.get_tokens(userId);
}

startRouter.message(CommandStart(), async (message) => {
  const match = message.text.match(/^\/start\s(\S+)/);
  const refUserId = match ? match[1] : null;

  const keyboard = createMainKeyboard();
  await sendMessage(message, { text: helloText, reply_markup: keyboard });

  await createTokenIfNotExist(message.from_user.id);
  const isSubscribe = await checkSubscription(message);

  if (refUserId) {
    let chatId = null;
    try { chatId = parseInt(refUserId, 10); } catch {}
    if (chatId) {
      const userName = message.from_user.username;
      const fullName = message.from_user.full_name;
      const mention = `<a href='tg://user?id=${message.from_user.id}'>${fullName}</a>`;
      await message.bot.sendMessage(chatId, `üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–ª–∏: @${userName} (${mention}).\n\n–ß—Ç–æ–±—ã –≤–∞—à–µ–º—É –¥—Ä—É–≥—É —Å—Ç–∞—Ç—å –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @gptDeep.\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>5 000</b>‚ö°Ô∏è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ –∏ <b>+500</b>‚ö°Ô∏èÔ∏è –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞.\n\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —ç—Ç–æ–≥–æ –¥–æ–ª–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>.\n–ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ @deepGPT –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π.`, { parse_mode: 'HTML' });
    }
  }

  if (!isSubscribe) {
    if (String(refUserId) !== String(message.from_user.id)) {
      await message.answer(refText, { reply_markup: new InlineKeyboardMarkup({ inline_keyboard: [[
        new InlineKeyboardButton({ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üëäüèª', url: 'https://t.me/gptDeep' })
      ], [
        new InlineKeyboardButton({ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ', callback_data: `ref-is-subscribe ${refUserId} ${message.from_user.id}` })
      ]] }) });
    }
    return;
  }

  await handleReferral(message, message.from_user.id, refUserId);
});

startRouter.callbackQuery(StartWithQuery('ref-is-subscribe'), async (callbackQuery) => {
  const [_, refUserId, userId] = callbackQuery.data.split(' ');
  const isSubscribe = await checkSubscription(callbackQuery.message, userId);
  if (!isSubscribe) {
    await callbackQuery.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! üò°');
    return;
  }
  await handleReferral(callbackQuery.message, userId, refUserId);
});

startRouter.message(TextCommand([helpCommand(), helpText()]), async (message) => {
  await message.answer(`–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ—Å—É—Äc –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º - ‚ö°Ô∏è (—ç–Ω–µ—Ä–≥–∏—è).\n–≠—Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–ª—è –≤—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.\n\n–ö–∞–∂–¥–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ç—Ä–∞—Ç–∏—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ö°Ô∏è.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö ‚ö°Ô∏è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –º–æ–¥–µ–ª–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ –æ–±—ä—ë–º–∞ –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n–î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /clear, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥ ‚ö°Ô∏è (—ç–Ω–µ—Ä–≥–∏–∏)! \n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—â–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã. –ê —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞—á–∞–ª–∞ –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø–æ–º–æ—â–∏.\n\n/app - üî• –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é!\n/start - üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç, –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.\n/model - üõ†Ô∏è –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –±–æ—Ç–∞.\n/system - ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.   \n/clear - üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–±—ã—Ç—å –±–æ—Ç—É –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é.  \n/balance - ‚ú® –ë–∞–ª–∞–Ω—Å, –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å ‚ö°Ô∏è.\n/image - üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (Midjourney, DALL¬∑E 3, Flux, Stable Diffusion)\n/buy - üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚ö°Ô∏è.\n/referral - üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n/suno - üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ (Suno)\n/text - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
});

startRouter.message(TextCommand([appCommand()]), async (message) => {
  await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://t.me/DeepGPTBot/App');
});
