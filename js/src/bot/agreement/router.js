import { Router } from 'aiogram'; // Stub import

export const agreementRouter = new Router();

export const AgreementStatuses = {
  ACCEPT_AGREEMENT: 'accept_agreement',
  DECLINE_AGREEMENT: 'decline_agreement'
};

import { TextCommandQuery } from '../filters.js';
import { agreementService } from '../../services/index.js';

export async function agreementHandler(message) {
  const isAgreement = agreementService.get_agreement_status(message.from_user.id);

  if (!isAgreement) {
    await message.answer(
      'üìë –í—ã –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](https://grigoriy-grisha.github.io/chat_gpt_agreement/) –∏ [–ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://grigoriy-grisha.github.io/chat_gpt_agreement/PrivacyPolicy)?',
      {
        reply_markup: {
          resize_keyboard: true,
          inline_keyboard: [
            [
              { text: '–î–∞ ‚úÖ', callback_data: AgreementStatuses.ACCEPT_AGREEMENT },
              { text: '–ù–µ—Ç ‚ùå', callback_data: AgreementStatuses.DECLINE_AGREEMENT }
            ]
          ]
        }
      }
    );
  }

  return isAgreement;
}

// Callback query handler for agreement buttons
agreementRouter.callbackQuery(
  TextCommandQuery([AgreementStatuses.ACCEPT_AGREEMENT, AgreementStatuses.DECLINE_AGREEMENT]),
  async (callbackQuery) => {
    if (callbackQuery.data === AgreementStatuses.ACCEPT_AGREEMENT) {
      await callbackQuery.answer('–£—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ! ü•∞');
      agreementService.set_agreement_status(callbackQuery.from_user.id, true);
      await callbackQuery.message.delete();
    }

    if (callbackQuery.data === AgreementStatuses.DECLINE_AGREEMENT) {
      await callbackQuery.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è! ‚òπÔ∏è');
    }

    await callbackQuery.message.delete();
  }
);
